package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Address;
import com.lyncwork.services.store.domain.BasicCompany;
import com.lyncwork.services.store.domain.BasicLyncWorkUser;
import com.lyncwork.services.store.domain.BasicRole;
import com.lyncwork.services.store.domain.BasicTeam;
import com.lyncwork.services.store.domain.Company;
import com.lyncwork.services.store.domain.LyncWorkUser;
import com.lyncwork.services.store.domain.Role;
import com.lyncwork.services.store.domain.Team;
import com.lyncwork.services.store.service.dto.AddressDTO;
import com.lyncwork.services.store.service.dto.BasicCompanyDTO;
import com.lyncwork.services.store.service.dto.BasicLyncWorkUserDTO;
import com.lyncwork.services.store.service.dto.BasicRoleDTO;
import com.lyncwork.services.store.service.dto.BasicTeamDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:48-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class BasicLyncWorkUserMapperImpl implements BasicLyncWorkUserMapper {

    @Override
    public List<BasicLyncWorkUser> toEntity(List<BasicLyncWorkUserDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<BasicLyncWorkUser> list = new ArrayList<BasicLyncWorkUser>( dtoList.size() );
        for ( BasicLyncWorkUserDTO basicLyncWorkUserDTO : dtoList ) {
            list.add( toEntity( basicLyncWorkUserDTO ) );
        }

        return list;
    }

    @Override
    public List<BasicLyncWorkUserDTO> toDto(List<BasicLyncWorkUser> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<BasicLyncWorkUserDTO> list = new ArrayList<BasicLyncWorkUserDTO>( entityList.size() );
        for ( BasicLyncWorkUser basicLyncWorkUser : entityList ) {
            list.add( toDto( basicLyncWorkUser ) );
        }

        return list;
    }

    @Override
    public BasicLyncWorkUserDTO toDto(BasicLyncWorkUser entity) {
        if ( entity == null ) {
            return null;
        }

        BasicLyncWorkUserDTO basicLyncWorkUserDTO = new BasicLyncWorkUserDTO();

        basicLyncWorkUserDTO.setId( entity.getId() );
        basicLyncWorkUserDTO.setFirstName( entity.getFirstName() );
        basicLyncWorkUserDTO.setLastName( entity.getLastName() );
        basicLyncWorkUserDTO.setAvatar( entity.getAvatar() );
        basicLyncWorkUserDTO.setPhonePrimary( entity.getPhonePrimary() );
        basicLyncWorkUserDTO.setEmailPrimary( entity.getEmailPrimary() );
        basicLyncWorkUserDTO.setRoles( basicRoleSetToBasicRoleDTOSet( entity.getRoles() ) );
        basicLyncWorkUserDTO.setTeams( basicTeamSetToBasicTeamDTOSet( entity.getTeams() ) );
        basicLyncWorkUserDTO.setCompany( basicCompanyToBasicCompanyDTO( entity.getCompany() ) );
        basicLyncWorkUserDTO.setUserStatus( entity.getUserStatus() );
        basicLyncWorkUserDTO.setLinkedinUrl( entity.getLinkedinUrl() );

        return basicLyncWorkUserDTO;
    }

    @Override
    public BasicLyncWorkUserDTO toDto(LyncWorkUser entity) {
        if ( entity == null ) {
            return null;
        }

        BasicLyncWorkUserDTO basicLyncWorkUserDTO = new BasicLyncWorkUserDTO();

        basicLyncWorkUserDTO.setId( entity.getId() );
        basicLyncWorkUserDTO.setFirstName( entity.getFirstName() );
        basicLyncWorkUserDTO.setLastName( entity.getLastName() );
        basicLyncWorkUserDTO.setAvatar( entity.getAvatar() );
        basicLyncWorkUserDTO.setPhonePrimary( entity.getPhonePrimary() );
        basicLyncWorkUserDTO.setEmailPrimary( entity.getEmailPrimary() );
        basicLyncWorkUserDTO.setRoles( roleSetToBasicRoleDTOSet( entity.getRoles() ) );
        basicLyncWorkUserDTO.setTeams( teamSetToBasicTeamDTOSet( entity.getTeams() ) );
        basicLyncWorkUserDTO.setCompany( companyToBasicCompanyDTO( entity.getCompany() ) );
        basicLyncWorkUserDTO.setUserStatus( entity.getUserStatus() );
        basicLyncWorkUserDTO.setLinkedinUrl( entity.getLinkedinUrl() );

        return basicLyncWorkUserDTO;
    }

    @Override
    public BasicLyncWorkUser toEntity(BasicLyncWorkUserDTO dto) {
        if ( dto == null ) {
            return null;
        }

        BasicLyncWorkUser basicLyncWorkUser = new BasicLyncWorkUser();

        basicLyncWorkUser.id( dto.getId() );
        basicLyncWorkUser.setFirstName( dto.getFirstName() );
        basicLyncWorkUser.setLastName( dto.getLastName() );
        basicLyncWorkUser.setAvatar( dto.getAvatar() );
        basicLyncWorkUser.setPhonePrimary( dto.getPhonePrimary() );
        basicLyncWorkUser.setEmailPrimary( dto.getEmailPrimary() );
        basicLyncWorkUser.setCompany( basicCompanyDTOToBasicCompany( dto.getCompany() ) );
        basicLyncWorkUser.setRoles( basicRoleDTOSetToBasicRoleSet( dto.getRoles() ) );
        basicLyncWorkUser.setTeams( basicTeamDTOSetToBasicTeamSet( dto.getTeams() ) );
        basicLyncWorkUser.setUserStatus( dto.getUserStatus() );
        basicLyncWorkUser.linkedinUrl( dto.getLinkedinUrl() );

        return basicLyncWorkUser;
    }

    protected BasicRoleDTO basicRoleToBasicRoleDTO(BasicRole basicRole) {
        if ( basicRole == null ) {
            return null;
        }

        BasicRoleDTO basicRoleDTO = new BasicRoleDTO();

        basicRoleDTO.setId( basicRole.getId() );
        basicRoleDTO.setRoleName( basicRole.getRoleName() );

        return basicRoleDTO;
    }

    protected Set<BasicRoleDTO> basicRoleSetToBasicRoleDTOSet(Set<BasicRole> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicRoleDTO> set1 = new HashSet<BasicRoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicRole basicRole : set ) {
            set1.add( basicRoleToBasicRoleDTO( basicRole ) );
        }

        return set1;
    }

    protected BasicTeamDTO basicTeamToBasicTeamDTO(BasicTeam basicTeam) {
        if ( basicTeam == null ) {
            return null;
        }

        BasicTeamDTO basicTeamDTO = new BasicTeamDTO();

        basicTeamDTO.setId( basicTeam.getId() );
        basicTeamDTO.setTeamName( basicTeam.getTeamName() );
        basicTeamDTO.setTeamColor( basicTeam.getTeamColor() );

        return basicTeamDTO;
    }

    protected Set<BasicTeamDTO> basicTeamSetToBasicTeamDTOSet(Set<BasicTeam> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicTeamDTO> set1 = new HashSet<BasicTeamDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicTeam basicTeam : set ) {
            set1.add( basicTeamToBasicTeamDTO( basicTeam ) );
        }

        return set1;
    }

    protected AddressDTO addressToAddressDTO(Address address) {
        if ( address == null ) {
            return null;
        }

        AddressDTO addressDTO = new AddressDTO();

        addressDTO.setId( address.getId() );
        addressDTO.setAddressType( address.getAddressType() );
        addressDTO.setSysCreationDate( address.getSysCreationDate() );
        addressDTO.setSysUpdateDate( address.getSysUpdateDate() );
        addressDTO.setLastUpdatedBy( address.getLastUpdatedBy() );
        addressDTO.setLineOne( address.getLineOne() );
        addressDTO.setLineTwo( address.getLineTwo() );
        addressDTO.setAptNum( address.getAptNum() );
        addressDTO.setCity( address.getCity() );
        addressDTO.setState( address.getState() );
        addressDTO.setPostalCode( address.getPostalCode() );
        addressDTO.setCountry( address.getCountry() );
        addressDTO.setExpirationDate( address.getExpirationDate() );

        return addressDTO;
    }

    protected Set<AddressDTO> addressSetToAddressDTOSet(Set<Address> set) {
        if ( set == null ) {
            return null;
        }

        Set<AddressDTO> set1 = new HashSet<AddressDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Address address : set ) {
            set1.add( addressToAddressDTO( address ) );
        }

        return set1;
    }

    protected BasicCompanyDTO basicCompanyToBasicCompanyDTO(BasicCompany basicCompany) {
        if ( basicCompany == null ) {
            return null;
        }

        BasicCompanyDTO basicCompanyDTO = new BasicCompanyDTO();

        basicCompanyDTO.setId( basicCompany.getId() );
        basicCompanyDTO.setAddresses( addressSetToAddressDTOSet( basicCompany.getAddresses() ) );
        basicCompanyDTO.setCompanyName( basicCompany.getCompanyName() );

        return basicCompanyDTO;
    }

    protected BasicRoleDTO roleToBasicRoleDTO(Role role) {
        if ( role == null ) {
            return null;
        }

        BasicRoleDTO basicRoleDTO = new BasicRoleDTO();

        basicRoleDTO.setId( role.getId() );
        basicRoleDTO.setRoleName( role.getRoleName() );

        return basicRoleDTO;
    }

    protected Set<BasicRoleDTO> roleSetToBasicRoleDTOSet(Set<Role> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicRoleDTO> set1 = new HashSet<BasicRoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Role role : set ) {
            set1.add( roleToBasicRoleDTO( role ) );
        }

        return set1;
    }

    protected BasicTeamDTO teamToBasicTeamDTO(Team team) {
        if ( team == null ) {
            return null;
        }

        BasicTeamDTO basicTeamDTO = new BasicTeamDTO();

        basicTeamDTO.setId( team.getId() );
        basicTeamDTO.setTeamName( team.getTeamName() );
        basicTeamDTO.setTeamColor( team.getTeamColor() );

        return basicTeamDTO;
    }

    protected Set<BasicTeamDTO> teamSetToBasicTeamDTOSet(Set<Team> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicTeamDTO> set1 = new HashSet<BasicTeamDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Team team : set ) {
            set1.add( teamToBasicTeamDTO( team ) );
        }

        return set1;
    }

    protected BasicCompanyDTO companyToBasicCompanyDTO(Company company) {
        if ( company == null ) {
            return null;
        }

        BasicCompanyDTO basicCompanyDTO = new BasicCompanyDTO();

        basicCompanyDTO.setId( company.getId() );
        basicCompanyDTO.setAddresses( addressSetToAddressDTOSet( company.getAddresses() ) );
        basicCompanyDTO.setCompanyName( company.getCompanyName() );

        return basicCompanyDTO;
    }

    protected Address addressDTOToAddress(AddressDTO addressDTO) {
        if ( addressDTO == null ) {
            return null;
        }

        Address address = new Address();

        address.setId( addressDTO.getId() );
        address.setAddressType( addressDTO.getAddressType() );
        address.setSysCreationDate( addressDTO.getSysCreationDate() );
        address.setSysUpdateDate( addressDTO.getSysUpdateDate() );
        address.setLastUpdatedBy( addressDTO.getLastUpdatedBy() );
        address.setLineOne( addressDTO.getLineOne() );
        address.setLineTwo( addressDTO.getLineTwo() );
        address.setAptNum( addressDTO.getAptNum() );
        address.setCity( addressDTO.getCity() );
        address.setState( addressDTO.getState() );
        address.setPostalCode( addressDTO.getPostalCode() );
        address.setCountry( addressDTO.getCountry() );
        address.setExpirationDate( addressDTO.getExpirationDate() );

        return address;
    }

    protected Set<Address> addressDTOSetToAddressSet(Set<AddressDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Address> set1 = new HashSet<Address>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( AddressDTO addressDTO : set ) {
            set1.add( addressDTOToAddress( addressDTO ) );
        }

        return set1;
    }

    protected BasicCompany basicCompanyDTOToBasicCompany(BasicCompanyDTO basicCompanyDTO) {
        if ( basicCompanyDTO == null ) {
            return null;
        }

        BasicCompany basicCompany = new BasicCompany();

        basicCompany.setId( basicCompanyDTO.getId() );
        basicCompany.setCompanyName( basicCompanyDTO.getCompanyName() );
        basicCompany.setAddresses( addressDTOSetToAddressSet( basicCompanyDTO.getAddresses() ) );

        return basicCompany;
    }

    protected BasicRole basicRoleDTOToBasicRole(BasicRoleDTO basicRoleDTO) {
        if ( basicRoleDTO == null ) {
            return null;
        }

        BasicRole basicRole = new BasicRole();

        basicRole.setId( basicRoleDTO.getId() );
        basicRole.setRoleName( basicRoleDTO.getRoleName() );

        return basicRole;
    }

    protected Set<BasicRole> basicRoleDTOSetToBasicRoleSet(Set<BasicRoleDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicRole> set1 = new HashSet<BasicRole>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicRoleDTO basicRoleDTO : set ) {
            set1.add( basicRoleDTOToBasicRole( basicRoleDTO ) );
        }

        return set1;
    }

    protected BasicTeam basicTeamDTOToBasicTeam(BasicTeamDTO basicTeamDTO) {
        if ( basicTeamDTO == null ) {
            return null;
        }

        BasicTeam basicTeam = new BasicTeam();

        basicTeam.setId( basicTeamDTO.getId() );
        basicTeam.setTeamName( basicTeamDTO.getTeamName() );
        basicTeam.setTeamColor( basicTeamDTO.getTeamColor() );

        return basicTeam;
    }

    protected Set<BasicTeam> basicTeamDTOSetToBasicTeamSet(Set<BasicTeamDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicTeam> set1 = new HashSet<BasicTeam>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicTeamDTO basicTeamDTO : set ) {
            set1.add( basicTeamDTOToBasicTeam( basicTeamDTO ) );
        }

        return set1;
    }
}
