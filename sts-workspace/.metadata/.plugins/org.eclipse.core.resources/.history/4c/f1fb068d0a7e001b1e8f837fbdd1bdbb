<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>SchemaMultiTenantConnectionProvider.java</title><link rel="stylesheet" href="../jacoco-resources/prettify.css" type="text/css"/><script type="text/javascript" src="../jacoco-resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Dropbox</a> &gt; <a href="index.source.html" class="el_package">com.lyncwork.services.dropbox.repository.hibernate</a> &gt; <span class="el_source">SchemaMultiTenantConnectionProvider.java</span></div><h1>SchemaMultiTenantConnectionProvider.java</h1><pre class="source lang-java linenums">package com.lyncwork.services.dropbox.repository.hibernate;

import org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.thymeleaf.util.StringUtils;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Locale;

@Component
public class SchemaMultiTenantConnectionProvider implements MultiTenantConnectionProvider {
<span class="nc" id="L16">    private static final Logger logger = LoggerFactory.getLogger(SchemaMultiTenantConnectionProvider.class);</span>
    private static final String DEFAULT_CATALOG = &quot;dropbox&quot;;

    private DataSource dataSource;

<span class="nc" id="L21">    public SchemaMultiTenantConnectionProvider(DataSource dataSource) {</span>
<span class="nc" id="L22">        this.dataSource = dataSource;</span>
<span class="nc" id="L23">    }</span>

    @Override
    public Connection getAnyConnection() throws SQLException {
<span class="nc" id="L27">        return this.dataSource.getConnection();</span>
    }

    @Override
    public void releaseAnyConnection(Connection connection) throws SQLException {
<span class="nc" id="L32">        connection.close();</span>
<span class="nc" id="L33">    }</span>

    @Override
    public Connection getConnection(String tenantIdentifier) throws SQLException {
<span class="nc" id="L37">        logger.debug(&quot;Getting connection for tenant {}&quot;, tenantIdentifier);</span>
<span class="nc" id="L38">        Connection connection = this.getAnyConnection();</span>
<span class="nc bnc" id="L39" title="All 2 branches missed.">        if (StringUtils.equalsIgnoreCase(TenantContext.DEFAULT_SCHEMA, tenantIdentifier)){</span>
<span class="nc" id="L40">            connection.setCatalog(DEFAULT_CATALOG);</span>
        } else {
<span class="nc" id="L42">            connection.setCatalog(StringUtils.toLowerCase(tenantIdentifier, Locale.ENGLISH));</span>
        }
<span class="nc" id="L44">        return connection;</span>
    }

    @Override
    public void releaseConnection(String tenantIdentifier, Connection connection) throws SQLException {
<span class="nc" id="L49">        logger.debug(&quot;Releasing connection for tenant {}&quot;, tenantIdentifier);</span>
<span class="nc bnc" id="L50" title="All 2 branches missed.">        if (StringUtils.equalsIgnoreCase(TenantContext.DEFAULT_SCHEMA, tenantIdentifier)){</span>
<span class="nc" id="L51">            connection.setCatalog(DEFAULT_CATALOG);</span>
        } else {
<span class="nc" id="L53">            connection.setCatalog(StringUtils.toLowerCase(tenantIdentifier, Locale.ENGLISH));</span>
        }
<span class="nc" id="L55">        this.releaseAnyConnection(connection);</span>
<span class="nc" id="L56">    }</span>

    @Override
    public boolean supportsAggressiveRelease() {
<span class="nc" id="L60">        return false;</span>
    }

    @Override
    public boolean isUnwrappableAs(Class unwrapType) {
<span class="nc" id="L65">        return false;</span>
    }

    @Override
    public &lt;T&gt; T unwrap(Class&lt;T&gt; unwrapType) {
<span class="nc" id="L70">        return null;</span>
    }
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.5.201910111838</span></div></body></html>