package xyz.pakwo.dropbox.teamfolder;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import xyz.pakwo.dropbox.teamfolder.request.create.AddFolderMemberRequest;
import xyz.pakwo.dropbox.teamfolder.request.create.CreateTeamFolderRequest;
import xyz.pakwo.dropbox.teamfolder.request.create.FolderMemberRequest;
import xyz.pakwo.dropbox.teamfolder.request.create.FolderMemberTagRequest;
import xyz.pakwo.dropbox.teamfolder.request.create.SetAccessInheritenceRequest;
import xyz.pakwo.dropbox.teamfolder.request.info.GetInfoTeamFolderRequest;
import xyz.pakwo.dropbox.teamfolder.request.list.ListTeamFolderRequest;
import xyz.pakwo.dropbox.teamfolder.service.TeamFolderService;

@Slf4j
@Component
public class TeamFolderFeature {

	@Setter
	private TeamFolderFeatureOption option;

	@Autowired
	private TeamFolderService teamFolderService;

	public void action() {
		if (option == null) {
			log.error("No option specified, will not perform any team folder feature");
			return;
		}

		if (TeamFolderFeatureOption.LIST_FOLDER.equals(option)) {
			log.info("Executing feature get list folder");
			getList();
			
		} else if (TeamFolderFeatureOption.CREATE_FOLDER.equals(option)) {
			log.info("Executing feature create folder");
			createTeamFolder();
			
		} else if (TeamFolderFeatureOption.GET_INFO_FOLDER.equals(option)) {
			log.info("Executing feature get info folder");
			getTeamFolderInfo();
			
		} else if (TeamFolderFeatureOption.SET_ACCESS_INHERITENCE.equals(option)) {
			log.info("Executing feature get info folder");
			setAccessInheritence();
			
		} else if (TeamFolderFeatureOption.ADD_FOLDER_MEMBER.equals(option)) {
			log.info("Executing feature get info folder");
			addFolderMember();
			
		} else {
			log.warn("unrecognized option {}", option);
		}
	}

	private void addFolderMember() {
		FolderMemberTagRequest memberTag = FolderMemberTagRequest.builder()
				.tag("dropbox_id")
				.dropboxId("g:67631b9dd480e9db0000000000000034")
				.build();
		FolderMemberRequest folderMember = FolderMemberRequest.builder()
				.accessLevel("editor")
				.member(memberTag)
				.build();
		
		AddFolderMemberRequest request = AddFolderMemberRequest.builder()
				.sharedFolderId("8985139840")
				.members(Arrays.asList(folderMember))
				.quiet(false)
				.customMessage("Welcome on board")
				.build();
		
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Dropbox-API-Select-User", "dbmid:AACrMYGecHhHtFrgzHPBLtv-LoPgBe_UfOw");
		
		teamFolderService.addFolderMember(request, headers);
		
	}

	private void setAccessInheritence() {
		SetAccessInheritenceRequest request = SetAccessInheritenceRequest.builder()
				.accessInheritance("no_inherit")
				.sharedFolderId("8983070000")
				.build();
		
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Dropbox-API-Select-User", "dbmid:AAAWg9-pad9IgTbboFx89sXmjPZINsHn37k");
		
		teamFolderService.setAccessInheritence(request, headers);
		
	}

	private void createTeamFolder() {
		CreateTeamFolderRequest request = CreateTeamFolderRequest.builder()
				.autoRename(false)
				.path("/TestTeamFolder5")
				.build();
		
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Dropbox-API-Select-User", "dbmid:AAAWg9-pad9IgTbboFx89sXmjPZINsHn37k");
		headers.put("Dropbox-API-Path-Root", "{\".tag\":\"namespace_id\",\"namespace_id\":\"8918115488\"}");

		teamFolderService.createTeamFolder(request, headers);
	}

	private void getTeamFolderInfo() {
		GetInfoTeamFolderRequest request = GetInfoTeamFolderRequest.builder().teamFolderIds(Arrays.asList("8936396528"))
				.build();
		teamFolderService.getInfo(request);
	}

	private void getList() {
		ListTeamFolderRequest request = ListTeamFolderRequest.builder().limit(100).build();
		teamFolderService.getList(request);
	}

}
