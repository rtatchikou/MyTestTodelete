package com.lyncwork.services.hellosign.client.dropbox.client.member;

import com.amazonaws.services.managedblockchain.model.DeleteMemberRequest;
import com.lyncwork.services.hellosign.client.dropbox.config.RequestDropboxAPIConfig;
import com.lyncwork.services.hellosign.client.dropbox.model.request.member.add.AddMemberRequest;
import com.lyncwork.services.hellosign.client.dropbox.model.request.member.list.ListMemberRequest;
import com.lyncwork.services.hellosign.client.dropbox.model.request.member.recover.RecoverMemberRequest;
import com.lyncwork.services.hellosign.client.dropbox.model.response.member.add.AddMemberWrapper;
import com.lyncwork.services.hellosign.client.dropbox.model.response.member.delete.DeleteResponse;
import com.lyncwork.services.hellosign.client.dropbox.model.response.member.list.ListMember;
import com.lyncwork.services.hellosign.client.dropbox.model.response.member.recover.RecoverMemberErrorResponse;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

@FeignClient(url = "${dropbox.api.url}", value = "member", configuration = RequestDropboxAPIConfig.class)
public interface DropboxMemberClientFeign {
	
	@PostMapping(path = "/team/members/add", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE )
	AddMemberWrapper addMember(@RequestBody AddMemberRequest request);

	@PostMapping(path = "/team/members/list", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE )
	ListMember getMembers(@RequestBody ListMemberRequest request);

	@PostMapping(path = "/team/members/remove", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE )
	DeleteResponse deleteMember(@RequestBody DeleteMemberRequest request);

	@PostMapping(path = "/team/members/recover", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE )
	RecoverMemberErrorResponse recoverMember(@RequestBody RecoverMemberRequest request);
}
