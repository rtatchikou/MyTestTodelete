<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>DatabaseConfiguration.java</title><link rel="stylesheet" href="../jacoco-resources/prettify.css" type="text/css"/><script type="text/javascript" src="../jacoco-resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Dropbox</a> &gt; <a href="index.source.html" class="el_package">com.lyncwork.services.dropbox.config</a> &gt; <span class="el_source">DatabaseConfiguration.java</span></div><h1>DatabaseConfiguration.java</h1><pre class="source lang-java linenums">package com.lyncwork.services.dropbox.config;

import io.github.jhipster.config.JHipsterConstants;
import io.github.jhipster.config.h2.H2ConfigurationHelper;
import org.hibernate.MultiTenancyStrategy;
import org.hibernate.cfg.AvailableSettings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.lyncwork.services.dropbox.DropboxApp;
import com.lyncwork.services.dropbox.repository.hibernate.SchemaMultiTenantConnectionProvider;
import com.lyncwork.services.dropbox.repository.hibernate.TenantContextSchemaResolver;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.*;

@Configuration
@EnableJpaRepositories(&quot;com.lyncwork.servicesd.dropbox.repository&quot;)
@EnableJpaAuditing(auditorAwareRef = &quot;springSecurityAuditorAware&quot;)
@EnableTransactionManagement
public class DatabaseConfiguration {

<span class="nc" id="L40">    private final Logger log = LoggerFactory.getLogger(DatabaseConfiguration.class);</span>

    private final Environment env;

    @Autowired
    JpaVendorAdapter jpaVendorAdapter;

    @Autowired
    JpaProperties jpaProperties;

    @Autowired
    DataSource dataSource;

<span class="nc" id="L53">    public DatabaseConfiguration(Environment env) {</span>
<span class="nc" id="L54">        this.env = env;</span>
<span class="nc" id="L55">    }</span>

    @Bean
    public JpaVendorAdapter jpaVendorAdapter(){
<span class="nc" id="L59">        return new HibernateJpaVendorAdapter();</span>
    }

    @Bean
    @Autowired
    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource,
                                                                       SchemaMultiTenantConnectionProvider multiTenantConnectionProvider,
                                                                       TenantContextSchemaResolver currentTenantIdentifierResolver){
<span class="nc" id="L67">        Map&lt;String, Object&gt; props = new HashMap&lt;&gt;(this.jpaProperties.getProperties());</span>

<span class="nc" id="L69">        props.put(AvailableSettings.MULTI_TENANT, MultiTenancyStrategy.SCHEMA);</span>
<span class="nc" id="L70">        props.put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider);</span>
<span class="nc" id="L71">        props.put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver);</span>
<span class="nc" id="L72">        props.put(AvailableSettings.FORMAT_SQL, true);</span>


<span class="nc" id="L75">        LocalContainerEntityManagerFactoryBean result = new LocalContainerEntityManagerFactoryBean();</span>
<span class="nc" id="L76">        result.setDataSource(this.dataSource);</span>
<span class="nc" id="L77">        result.setPackagesToScan(DropboxApp.class.getPackageName());</span>
<span class="nc" id="L78">        result.setJpaVendorAdapter(this.jpaVendorAdapter);</span>
<span class="nc" id="L79">        result.setJpaPropertyMap(props);</span>
<span class="nc" id="L80">        return result;</span>
    }

    /**
     * Open the TCP port for the H2 database, so it is available remotely.
     *
     * @return the H2 database TCP server.
     * @throws SQLException if the server failed to start.
     */
    @Bean(initMethod = &quot;start&quot;, destroyMethod = &quot;stop&quot;)
    @Profile(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT)
    public Object h2TCPServer() throws SQLException {
<span class="nc" id="L92">        String port = getValidPortForH2();</span>
<span class="nc" id="L93">        log.debug(&quot;H2 database is available on port {}&quot;, port);</span>
<span class="nc" id="L94">        return H2ConfigurationHelper.createServer(port);</span>
    }

    private String getValidPortForH2() {
<span class="nc" id="L98">        int port = Integer.parseInt(env.getProperty(&quot;server.port&quot;));</span>
<span class="nc bnc" id="L99" title="All 2 branches missed.">        if (port &lt; 10000) {</span>
<span class="nc" id="L100">            port = 10000 + port;</span>
        } else {
<span class="nc bnc" id="L102" title="All 2 branches missed.">            if (port &lt; 63536) {</span>
<span class="nc" id="L103">                port = port + 2000;</span>
            } else {
<span class="nc" id="L105">                port = port - 2000;</span>
            }
        }
<span class="nc" id="L108">        return String.valueOf(port);</span>
    }
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.5.201910111838</span></div></body></html>