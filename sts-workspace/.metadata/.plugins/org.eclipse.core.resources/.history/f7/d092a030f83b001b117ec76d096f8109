package com.lyncwork.services.gusto.client.gusto.service.Processor;

import com.lyncwork.services.expensify.client.expensify.client.GustoClient;
import com.lyncwork.services.expensify.client.expensify.interceptor.GustoClientInterceptor;
import com.lyncwork.services.expensify.client.expensify.payload.Employee;
import com.lyncwork.services.expensify.client.expensify.payload.LyncWorkUser;
import com.lyncwork.services.expensify.client.expensify.payload.Termination;
import com.lyncwork.services.expensify.client.expensify.service.GustoService;
import com.lyncwork.services.gusto.client.store.client.SubscriptionAppClient;
import com.lyncwork.services.gusto.processors.Processor;
import com.lyncwork.services.gusto.service.IntgrationService.UserIntegrationQueueService;
import com.lyncwork.services.gusto.service.mapper.UserIntegrationMessageMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.util.*;

@Component
public class GustoProcessor extends Processor {

    private static final Logger logger = LoggerFactory.getLogger(GustoProcessor.class);
    @Autowired
    GustoService gustoService;
    @Autowired
    SubscriptionAppClient subscriptionAppClient;
    @Autowired
    GustoClient gustoClient;
    @Autowired
    UserIntegrationQueueService userIntegrationQueueService;
    @Autowired
    GustoClientInterceptor interceptor;

    @Override
    public <T> T provisionUser(LyncWorkUser lyncWorkUser) {
        String lyncWorkUserString = UserIntegrationMessageMapper.lyncWorkUserToString(lyncWorkUser);
        System.out.println(lyncWorkUser);
        GustoService.GustoParameters gustoParameters = gustoService.getGustoParameters();
        interceptor.setAccessToken(gustoParameters.getAccessToken());
        Map<String, Object> responseCode = gustoClient.provisionUser(gustoParameters.getCompanyId(), lyncWorkUserString);
        return null;
    }


    @Override
    public void deprovisionUser(LyncWorkUser lyncWorkUser) {
        GustoService.GustoParameters gustoParameters = gustoService.getGustoParameters();
        interceptor.setAccessToken(gustoParameters.getAccessToken());
        List<Employee> employees = gustoClient.getAllEmployees(gustoParameters.getCompanyId());
        Employee emp = new Employee();
        if (employees != null) {
            employees.stream().filter(employee -> employee.getEmail() != null && employee.getEmail().equalsIgnoreCase(lyncWorkUser.getEmailPrimary())).findFirst().ifPresent(
                employee -> emp.setId(employee.getId()));
            //interceptor.setAccessToken(gustoParameters.getAccessToken());
            Termination termination = gustoClient.setTermination(emp.getId(), new Termination(LocalDate.now().toString(), Boolean.TRUE).toJsonString());
        }
    }

    @Override
    public String getApplicationName() {
        return "Gusto";
    }

    @Override
    public UserIntegrationQueueService getUserIntegrationQueueService() {
        return userIntegrationQueueService;
    }


}
