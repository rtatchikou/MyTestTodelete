<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>Processor.java</title><link rel="stylesheet" href="../jacoco-resources/prettify.css" type="text/css"/><script type="text/javascript" src="../jacoco-resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Dropbox</a> &gt; <a href="index.source.html" class="el_package">com.lyncwork.services.dropbox.processors</a> &gt; <span class="el_source">Processor.java</span></div><h1>Processor.java</h1><pre class="source lang-java linenums">package com.lyncwork.services.dropbox.processors;

import com.lyncwork.clients.frontdoor.model.LyncWorkUser;
import com.lyncwork.services.dropbox.repository.hibernate.TenantContext;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.thymeleaf.util.StringUtils;

import java.util.Arrays;
import java.util.List;
import java.util.Locale;

<span class="nc" id="L13">public abstract class Processor {</span>

   public abstract &lt;T&gt; T provisionUser(LyncWorkUser lyncWorkUser);

   public abstract String getApplicationName();

    @Value(&quot;${lyncworks.schemas}&quot;)
    String schemas;


    private void consumeMessageQueue(){

<span class="nc" id="L25">    }</span>
    @Scheduled(fixedRate = 60000)
    public void consume() {

<span class="nc" id="L29">        List&lt;String&gt; tenants = Arrays.asList(this.schemas.split(&quot;,&quot;));</span>
<span class="nc" id="L30">        tenants.stream()</span>
<span class="nc" id="L31">                .map(String::trim)</span>
<span class="nc" id="L32">                .forEach(schema -&gt; {</span>
<span class="nc" id="L33">                    TenantContext.setTenant(StringUtils.toUpperCase(schema, Locale.ENGLISH));</span>
<span class="nc" id="L34">                    consumeMessageQueue();</span>
<span class="nc" id="L35">                });</span>

<span class="nc" id="L37">        TenantContext.setTenant(TenantContext.DEFAULT_SCHEMA);</span>
<span class="nc" id="L38">        consumeMessageQueue();</span>
<span class="nc" id="L39">    }</span>
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.5.201910111838</span></div></body></html>