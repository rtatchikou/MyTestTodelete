package com.lyncwork.services.gusto.service.IntgrationService;

import com.lyncwork.services.gusto.domain.UserIntegrationMessage;
import com.lyncwork.services.gusto.domain.UserIntegrationStatus;
import com.lyncwork.services.gusto.repository.UserIntegrationMessageRepository;
import com.lyncwork.services.gusto.service.dto.UserIntegrationMessageDTO;
import com.lyncwork.services.gusto.service.mapper.UserIntegrationMessageMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Service Implementation for managing {@link UserIntegrationMessage}.
 */
@Service
@Transactional
public class UserIntegrationMessageService {
    private final Logger log = LoggerFactory.getLogger(UserIntegrationMessageService.class);

    private UserIntegrationMessageRepository userIntegrationMessageRepository;

    private UserIntegrationMessageMapper userIntegrationMessageMapper;

    public UserIntegrationMessageService(UserIntegrationMessageRepository userIntegrationMessageRepository, UserIntegrationMessageMapper userIntegrationMessageMapper) {
        this.userIntegrationMessageRepository = userIntegrationMessageRepository;
        this.userIntegrationMessageMapper = userIntegrationMessageMapper;
    }

    /**
     * Save a userIntegrationMessage.
     *
     * @param userIntegrationMessageDTO the entity to save.
     * @return the persisted entity.
     */
    public UserIntegrationMessageDTO save(UserIntegrationMessageDTO userIntegrationMessageDTO) {
        log.debug("Request to save UserIntegrationMessage : {}", userIntegrationMessageDTO);
        UserIntegrationMessage userIntegrationMessage = userIntegrationMessageMapper.toEntity(userIntegrationMessageDTO);

        userIntegrationMessage = userIntegrationMessageRepository.save(userIntegrationMessage);
        return userIntegrationMessageMapper.toDto(userIntegrationMessage);
    }

    @Transactional(readOnly = true)
    public List<UserIntegrationMessageDTO> findAllByStatus(UserIntegrationStatus status) {
        return  userIntegrationMessageRepository
            .findAllByStatus(status)
            .stream()
            .map(userIntegrationMessageMapper::toDto)
            .collect(Collectors.toList());
    }
}
