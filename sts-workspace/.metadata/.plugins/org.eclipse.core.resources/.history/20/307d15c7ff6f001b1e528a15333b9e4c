package com.docu.app.dropbox.service.impl;

import com.docu.app.dropbox.repository.ContentClientFeign;
import com.docu.app.dropbox.repository.FilesClientFeign;
import com.docu.app.dropbox.repository.NameSpacesClientFeign;
import com.docu.app.dropbox.repository.custom.CustomInputStream;
import com.docu.app.dropbox.request.CreateTeamFolderRequest;
import com.docu.app.dropbox.response.MetadataCreateTeamFolder;
import com.docu.app.dropbox.response.NameSpace;
import com.docu.app.dropbox.response.NameSpaceList;
import com.docu.app.dropbox.response.UploadDropboxResponse;
import com.docu.app.dropbox.service.DropboxTeamFolderService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@Component
@Slf4j
public class DropboxTeamFolderServiceImpl implements DropboxTeamFolderService {

  @Autowired private FilesClientFeign filesClientFeign;
  @Autowired private ContentClientFeign contentClientFeign;
  @Autowired private NameSpacesClientFeign nameSpacesClientFeign;

  @Override
  public MetadataCreateTeamFolder createTeamFolder(
      CreateTeamFolderRequest request, Map<String, ?> headers) {
    MetadataCreateTeamFolder folder = filesClientFeign.createTeamFolder(request, headers);
    log.info("team folder created!");
    return folder;
  }

  @Override
  public File downloadFile(Map<String, String> headers) {
    CustomInputStream cis = contentClientFeign.downloadFile(headers);
    log.info("custom input stream {}", cis);

    try {
      File file = File.createTempFile(cis.getFileName(), cis.getExtension());
      //FileUtils.writeByteArrayToFile(file, cis.getData());
      log.info("Temp file : {}", file.getAbsolutePath());
      file = new File("/Users/traymond/Documents/GLORAINE_MEMOIRE/Les aflatoxines_1.pdf");
      return file;

    } catch (IOException e) {
      log.error(e.getMessage());
      return null;
    }
  }

  @Override
  public UploadDropboxResponse uploadAndShareFile(MultipartFile file, Map<String, String> headers) {

    byte[] data = null;
    try {
      data = file.getBytes();
      UploadDropboxResponse response = contentClientFeign.createTeamFolder(data, headers);
      log.info("File uploaded successfully!");
      return response;

    } catch (IOException e) {
      e.printStackTrace();
      return null;
    }
  }

  @Override
  public NameSpace getNameSpaceByName(String name) {
    NameSpaceList data = nameSpacesClientFeign.getList("{}");

    Map<String, NameSpace> nameSpaceMap = new HashMap<String, NameSpace>();

    // avoid duplicate key
    data.getNamespaces()
        .forEach(
            nameSpace -> {
              nameSpaceMap.putIfAbsent(nameSpace.getName(), nameSpace);
            });

    return nameSpaceMap.get(name);
  }
}
