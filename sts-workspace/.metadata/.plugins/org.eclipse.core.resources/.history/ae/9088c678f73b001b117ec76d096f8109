package com.lyncwork.services.expensify.client.expensify.decoder;

import com.lyncwork.services.gusto.client.gusto.interceptor.GustoClientInterceptor;
import com.lyncwork.services.gusto.client.gusto.service.GustoService;
import feign.Feign;
import feign.FeignException;
import feign.Response;
import feign.RetryableException;
import feign.codec.ErrorDecoder;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;

public class GustoErrorDecoder  implements ErrorDecoder {

    @Autowired
    GustoService gustoService;
    @Autowired
    GustoClientInterceptor interceptor;

    /**
     * Implement this method in order to decode an HTTP {@link Response} when
     * {@link Response#status()} is not in the 2xx range. Please raise application-specific exceptions
     * where possible. If your exception is retryable, wrap or subclass {@link RetryableException}
     *
     * @param methodKey {@link Feign#configKey} of the java method that invoked the request. ex.
     *                  {@code IAM#getUser()}
     * @param response  HTTP response where {@link Response#status() status} is greater than or equal
     *                  to {@code 300}.
     * @return Exception IOException, if there was a network error reading the response or an
     * application-specific exception decoded by the implementation. If the throwable is
     * retryable, it should be wrapped, or a subtype of {@link RetryableException}
     */
    @Override
    public Exception decode(String methodKey, Response response) {
            FeignException exception = FeignException.errorStatus(methodKey, response);

            switch (response.status()) {
                case 401:
                    String accessToken = gustoService.refreshAccessToken();
                    interceptor.setAccessToken(accessToken);
                    return new RetryableException(response.status(), exception.getMessage(), response.request().httpMethod(), new Date());
                default: break;
            }

            return exception;
    }
}
