package xyz.pakwo.expensify.service.open.feign;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;
import xyz.pakwo.expensify.domain.CreateInputSetting;
import xyz.pakwo.expensify.domain.Credential;
import xyz.pakwo.expensify.domain.GetInputSetting;
import xyz.pakwo.expensify.domain.InputSetting;
import xyz.pakwo.expensify.domain.RequestJobDescription;
import xyz.pakwo.expensify.domain.UpdateInputSetting;
import xyz.pakwo.expensify.model.Policy;
import xyz.pakwo.expensify.model.PolicyList;
import xyz.pakwo.expensify.model.UpdatePolicy;
import xyz.pakwo.expensify.service.PolicyService;

@Slf4j
public class PolicyServiceOpenFeign implements PolicyService {
	
	@Autowired
	private ClientOF clientOF; 
	
	@Autowired
	private Credential credential;

	@Override
	public Policy createPolicy(String policyName) {
		log.info("Creating policy via openfeign with name {}", policyName);
		InputSetting inputSetting = new CreateInputSetting("policy", policyName);
		RequestJobDescription request = new RequestJobDescription("create", credential, inputSetting);
		Map<String, String> data = new HashMap<String, String>();
		ObjectMapper mapper = new ObjectMapper();
		try {
			data.put("requestJobDescription", mapper.writeValueAsString(request));
		} catch (JsonProcessingException e) {
			log.error("error during parsing ", e);
		}
		
		Policy policy = clientOF.create(data);
		log.info("created policy {}", policy);
		
		return policy;
	}

	@Override
	public PolicyList getPolicies() {

		log.info("get data using openfeign");
		InputSetting inputSetting = new GetInputSetting("policyList", true, "lifefortress@gmail.com");
		RequestJobDescription request = new RequestJobDescription("get", credential, inputSetting);
		
		Map<String, String> data = new HashMap<String, String>();
		ObjectMapper mapper = new ObjectMapper();
		try {
			data.put("requestJobDescription", mapper.writeValueAsString(request));
		} catch (JsonProcessingException e) {
			log.error("error during parsing ", e);
		}
		
		PolicyList policyList = clientOF.get(data);
		log.info("list {}", policyList);
		
		return policyList;
	}

	@Override
	public UpdatePolicy updatePolicy(String policyId, String fileLocation) {
		InputSetting inputSetting = new UpdateInputSetting("employees", policyId, "csv");
		RequestJobDescription request = new RequestJobDescription("update", credential, inputSetting);
		
		MultiValueMap<String, Object> data = new LinkedMultiValueMap<String, Object>();
		ObjectMapper mapper = new ObjectMapper();
		try {
			data.add("requestJobDescription", mapper.writeValueAsString(request));
			
			File file = new File(fileLocation);
			byte[] fileBytes = Files.readAllBytes(file.toPath());
			
			MultiValueMap<String, String> fileMap = new LinkedMultiValueMap<String, String>();
			ContentDisposition contentDisposition = ContentDisposition.builder("form-data")
					.name("data")
					.filename(file.getName())
					.build();
			fileMap.add(HttpHeaders.CONTENT_DISPOSITION, contentDisposition.toString());
			
			HttpEntity<byte[]> fileEntity = new HttpEntity<byte[]>(fileBytes, fileMap);
			
			data.add("data", fileEntity);
		} catch (IOException e) {
			log.error("error during parsing ", e);
		}
		
		log.info("data to transfer : {}", data);
		
		UpdatePolicy updatePolicy = clientOF.update(data);
		log.info("updated policy {}", updatePolicy);
		
		return updatePolicy;
	}

}
