package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.ApplicationCapability;
import com.lyncwork.services.store.domain.Role;
import com.lyncwork.services.store.service.dto.ApplicationCapabilityDTO;
import com.lyncwork.services.store.service.dto.RoleDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:48-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class ApplicationCapabilityMapperImpl implements ApplicationCapabilityMapper {

    @Autowired
    private ApplicationMapper applicationMapper;
    @Autowired
    private RoleMapper roleMapper;

    @Override
    public List<ApplicationCapability> toEntity(List<ApplicationCapabilityDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<ApplicationCapability> list = new ArrayList<ApplicationCapability>( dtoList.size() );
        for ( ApplicationCapabilityDTO applicationCapabilityDTO : dtoList ) {
            list.add( toEntity( applicationCapabilityDTO ) );
        }

        return list;
    }

    @Override
    public List<ApplicationCapabilityDTO> toDto(List<ApplicationCapability> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<ApplicationCapabilityDTO> list = new ArrayList<ApplicationCapabilityDTO>( entityList.size() );
        for ( ApplicationCapability applicationCapability : entityList ) {
            list.add( toDto( applicationCapability ) );
        }

        return list;
    }

    @Override
    public ApplicationCapabilityDTO toDto(ApplicationCapability entity) {
        avoidBackReference( entity );

        if ( entity == null ) {
            return null;
        }

        ApplicationCapabilityDTO applicationCapabilityDTO = new ApplicationCapabilityDTO();

        applicationCapabilityDTO.setApplication( applicationMapper.toDto( entity.getApplication() ) );
        applicationCapabilityDTO.setRoles( roleSetToRoleDTOSet( entity.getRoles() ) );
        applicationCapabilityDTO.setId( entity.getId() );
        applicationCapabilityDTO.setCapability( entity.getCapability() );
        applicationCapabilityDTO.setValue( entity.getValue() );

        return applicationCapabilityDTO;
    }

    @Override
    public ApplicationCapability toEntity(ApplicationCapabilityDTO dto) {
        if ( dto == null ) {
            return null;
        }

        ApplicationCapability applicationCapability = new ApplicationCapability();

        applicationCapability.setApplication( applicationMapper.toEntity( dto.getApplication() ) );
        applicationCapability.setRoles( roleDTOSetToRoleSet( dto.getRoles() ) );
        applicationCapability.setId( dto.getId() );
        applicationCapability.setValue( dto.getValue() );
        applicationCapability.setCapability( dto.getCapability() );

        return applicationCapability;
    }

    protected Set<RoleDTO> roleSetToRoleDTOSet(Set<Role> set) {
        if ( set == null ) {
            return null;
        }

        Set<RoleDTO> set1 = new HashSet<RoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Role role : set ) {
            set1.add( roleMapper.toDto( role ) );
        }

        return set1;
    }

    protected Set<Role> roleDTOSetToRoleSet(Set<RoleDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Role> set1 = new HashSet<Role>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( RoleDTO roleDTO : set ) {
            set1.add( roleMapper.toEntity( roleDTO ) );
        }

        return set1;
    }
}
