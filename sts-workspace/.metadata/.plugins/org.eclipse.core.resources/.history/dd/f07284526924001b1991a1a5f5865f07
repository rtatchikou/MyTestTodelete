package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.ImportantContact;
import com.lyncwork.services.store.service.dto.ImportantContactDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:47-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class ImportantContactMapperImpl implements ImportantContactMapper {

    @Autowired
    private CompanyMapper companyMapper;

    @Override
    public List<ImportantContact> toEntity(List<ImportantContactDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<ImportantContact> list = new ArrayList<ImportantContact>( dtoList.size() );
        for ( ImportantContactDTO importantContactDTO : dtoList ) {
            list.add( toEntity( importantContactDTO ) );
        }

        return list;
    }

    @Override
    public List<ImportantContactDTO> toDto(List<ImportantContact> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<ImportantContactDTO> list = new ArrayList<ImportantContactDTO>( entityList.size() );
        for ( ImportantContact importantContact : entityList ) {
            list.add( toDto( importantContact ) );
        }

        return list;
    }

    @Override
    public ImportantContact toEntity(ImportantContactDTO dto) {
        if ( dto == null ) {
            return null;
        }

        ImportantContact importantContact = new ImportantContact();

        importantContact.setFirstName( dto.getFirstName() );
        importantContact.setLastName( dto.getLastName() );
        importantContact.setCompany( companyMapper.toEntity( dto.getCompany() ) );
        importantContact.setUserId( dto.getUserId() );
        importantContact.setId( dto.getId() );
        importantContact.setPosition( dto.getPosition() );

        return importantContact;
    }

    @Override
    public ImportantContactDTO toDto(ImportantContact entity) {
        avoidBackreferences( entity );

        if ( entity == null ) {
            return null;
        }

        ImportantContactDTO importantContactDTO = new ImportantContactDTO();

        importantContactDTO.setFirstName( entity.getFirstName() );
        importantContactDTO.setLastName( entity.getLastName() );
        importantContactDTO.setCompany( companyMapper.toDto( entity.getCompany() ) );
        importantContactDTO.setUserId( entity.getUserId() );
        importantContactDTO.setId( entity.getId() );
        importantContactDTO.setPosition( entity.getPosition() );

        return importantContactDTO;
    }
}
