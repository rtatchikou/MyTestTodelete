package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.WorkflowTask;
import com.lyncwork.services.store.domain.WorkflowTaskProperty;
import com.lyncwork.services.store.service.dto.WorkflowTaskDTO;
import com.lyncwork.services.store.service.dto.WorkflowTaskPropertyDTO;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-10T19:26:39-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class WorkflowTaskMapperImpl implements WorkflowTaskMapper {

    @Autowired
    private WorkflowMapper workflowMapper;
    @Autowired
    private WorkflowTaskPropertyMapper workflowTaskPropertyMapper;
    @Autowired
    private TaskMapper taskMapper;

    @Override
    public List<WorkflowTask> toEntity(List<WorkflowTaskDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<WorkflowTask> list = new ArrayList<WorkflowTask>( dtoList.size() );
        for ( WorkflowTaskDTO workflowTaskDTO : dtoList ) {
            list.add( toEntity( workflowTaskDTO ) );
        }

        return list;
    }

    @Override
    public List<WorkflowTaskDTO> toDto(List<WorkflowTask> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<WorkflowTaskDTO> list = new ArrayList<WorkflowTaskDTO>( entityList.size() );
        for ( WorkflowTask workflowTask : entityList ) {
            list.add( toDto( workflowTask ) );
        }

        return list;
    }

    @Override
    public WorkflowTask toEntity(WorkflowTaskDTO dto) {
        if ( dto == null ) {
            return null;
        }

        WorkflowTask workflowTask = new WorkflowTask();

        workflowTask.setTask( taskMapper.toEntity( dto.getTask() ) );
        workflowTask.workflow( workflowMapper.toEntity( dto.getWorkflow() ) );
        workflowTask.setWorkflowTaskProperties( stringWorkflowTaskPropertyDTOMapToStringWorkflowTaskPropertyMap( dto.getWorkflowTaskProperties() ) );
        workflowTask.setOrder( dto.getOrder() );
        workflowTask.id( dto.getId() );
        workflowTask.setType( dto.getType() );

        return workflowTask;
    }

    @Override
    public WorkflowTaskDTO toDto(WorkflowTask entity) {
        avoidBackreferences( entity );

        if ( entity == null ) {
            return null;
        }

        WorkflowTaskDTO workflowTaskDTO = new WorkflowTaskDTO();

        workflowTaskDTO.setTask( taskMapper.toDto( entity.getTask() ) );
        workflowTaskDTO.setWorkflow( workflowMapper.toDto( entity.getWorkflow() ) );
        workflowTaskDTO.setWorkflowTaskProperties( stringWorkflowTaskPropertyMapToStringWorkflowTaskPropertyDTOMap( entity.getWorkflowTaskProperties() ) );
        workflowTaskDTO.setOrder( entity.getOrder() );
        workflowTaskDTO.setId( entity.getId() );
        workflowTaskDTO.setType( entity.getType() );

        return workflowTaskDTO;
    }

    protected Map<String, WorkflowTaskProperty> stringWorkflowTaskPropertyDTOMapToStringWorkflowTaskPropertyMap(Map<String, WorkflowTaskPropertyDTO> map) {
        if ( map == null ) {
            return null;
        }

        Map<String, WorkflowTaskProperty> map1 = new HashMap<String, WorkflowTaskProperty>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );

        for ( java.util.Map.Entry<String, WorkflowTaskPropertyDTO> entry : map.entrySet() ) {
            String key = entry.getKey();
            WorkflowTaskProperty value = workflowTaskPropertyMapper.toEntity( entry.getValue() );
            map1.put( key, value );
        }

        return map1;
    }

    protected Map<String, WorkflowTaskPropertyDTO> stringWorkflowTaskPropertyMapToStringWorkflowTaskPropertyDTOMap(Map<String, WorkflowTaskProperty> map) {
        if ( map == null ) {
            return null;
        }

        Map<String, WorkflowTaskPropertyDTO> map1 = new HashMap<String, WorkflowTaskPropertyDTO>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );

        for ( java.util.Map.Entry<String, WorkflowTaskProperty> entry : map.entrySet() ) {
            String key = entry.getKey();
            WorkflowTaskPropertyDTO value = workflowTaskPropertyMapper.toDto( entry.getValue() );
            map1.put( key, value );
        }

        return map1;
    }
}
