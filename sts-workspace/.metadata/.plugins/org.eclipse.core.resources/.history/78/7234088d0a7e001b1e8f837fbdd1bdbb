<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>TokenProvider.java</title><link rel="stylesheet" href="../jacoco-resources/prettify.css" type="text/css"/><script type="text/javascript" src="../jacoco-resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Dropbox</a> &gt; <a href="index.source.html" class="el_package">com.lyncwork.services.dropbox.security.jwt</a> &gt; <span class="el_source">TokenProvider.java</span></div><h1>TokenProvider.java</h1><pre class="source lang-java linenums">package com.lyncwork.services.dropbox.security.jwt;

import io.github.jhipster.config.JHipsterProperties;
import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Component;

import com.lyncwork.services.dropbox.repository.hibernate.TenantContext;
import com.lyncwork.services.dropbox.security.AuthoritiesConstants;

import java.security.Key;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.stream.Collectors;

@Component
public class TokenProvider implements InitializingBean {

<span class="nc" id="L29">    private final Logger log = LoggerFactory.getLogger(TokenProvider.class);</span>

    private static final String AUTHORITIES_KEY = &quot;auth&quot;;

    private static final String TENANT = &quot;tenant&quot;;

    private Key key;

    private long tokenValidityInMilliseconds;

    private long tokenValidityInMillisecondsForRememberMe;

    private final JHipsterProperties jHipsterProperties;

<span class="nc" id="L43">    public TokenProvider(JHipsterProperties jHipsterProperties) {</span>
<span class="nc" id="L44">        this.jHipsterProperties = jHipsterProperties;</span>
<span class="nc" id="L45">    }</span>

    @Override
    public void afterPropertiesSet() throws Exception {
        byte[] keyBytes;
<span class="nc" id="L50">        String secret = jHipsterProperties.getSecurity().getAuthentication().getJwt().getSecret();</span>
<span class="nc" id="L51">            log.debug(&quot;Using a Base64-encoded JWT secret key&quot;);</span>
<span class="nc" id="L52">            keyBytes = Decoders.BASE64.decode(jHipsterProperties.getSecurity().getAuthentication().getJwt().getBase64Secret());</span>

<span class="nc" id="L54">        this.key = Keys.hmacShaKeyFor(keyBytes);</span>
<span class="nc" id="L55">        this.tokenValidityInMilliseconds =</span>
<span class="nc" id="L56">            1000 * jHipsterProperties.getSecurity().getAuthentication().getJwt().getTokenValidityInSeconds();</span>
<span class="nc" id="L57">        this.tokenValidityInMillisecondsForRememberMe =</span>
<span class="nc" id="L58">            1000 * jHipsterProperties.getSecurity().getAuthentication().getJwt()</span>
<span class="nc" id="L59">                .getTokenValidityInSecondsForRememberMe();</span>
<span class="nc" id="L60">    }</span>

    public String createToken(Authentication authentication, boolean rememberMe) {
<span class="nc" id="L63">        String authorities = authentication.getAuthorities().stream()</span>
<span class="nc" id="L64">            .map(GrantedAuthority::getAuthority)</span>
<span class="nc" id="L65">            .collect(Collectors.joining(&quot;,&quot;));</span>

<span class="nc" id="L67">        long now = (new Date()).getTime();</span>
        Date validity;
<span class="nc bnc" id="L69" title="All 2 branches missed.">        if (rememberMe) {</span>
<span class="nc" id="L70">            validity = new Date(now + this.tokenValidityInMillisecondsForRememberMe);</span>
        } else {
<span class="nc" id="L72">            validity = new Date(now + this.tokenValidityInMilliseconds);</span>
        }

<span class="nc" id="L75">        return Jwts.builder()</span>
<span class="nc" id="L76">            .setSubject(authentication.getName())</span>
<span class="nc" id="L77">            .claim(AUTHORITIES_KEY, authorities)</span>
<span class="nc" id="L78">            .signWith(key, SignatureAlgorithm.HS512)</span>
<span class="nc" id="L79">            .setExpiration(validity)</span>
<span class="nc" id="L80">            .compact();</span>
    }

    public Authentication getAuthentication(String token) {
<span class="nc" id="L84">        Claims claims = Jwts.parser()</span>
<span class="nc" id="L85">            .setSigningKey(key)</span>
<span class="nc" id="L86">            .parseClaimsJws(token)</span>
<span class="nc" id="L87">            .getBody();</span>

<span class="nc" id="L89">        Collection&lt;? extends GrantedAuthority&gt; authorities =</span>
<span class="nc" id="L90">            Arrays.stream(claims.get(AUTHORITIES_KEY).toString().split(&quot;,&quot;))</span>
<span class="nc" id="L91">                .map(SimpleGrantedAuthority::new)</span>
<span class="nc" id="L92">                .collect(Collectors.toList());</span>

<span class="nc" id="L94">        User principal = new User(claims.getSubject(), &quot;&quot;, authorities);</span>

<span class="nc" id="L96">        return new UsernamePasswordAuthenticationToken(principal, token, authorities);</span>
    }

    public boolean validateToken(String authToken) {
        try {
<span class="nc" id="L101">            Jwts.parser().setSigningKey(key).parseClaimsJws(authToken);</span>
<span class="nc" id="L102">            return true;</span>
<span class="nc" id="L103">        } catch (JwtException | IllegalArgumentException e) {</span>
<span class="nc" id="L104">            log.info(&quot;Invalid JWT token.&quot;);</span>
<span class="nc" id="L105">            log.trace(&quot;Invalid JWT token trace.&quot;, e);</span>
        }
<span class="nc" id="L107">        return false;</span>
    }

    public  String getTenantClaim(String authToken) {
        Claims claims;
        try {
<span class="nc" id="L113">            Jws&lt;Claims&gt; claimsJws =Jwts.parser().setSigningKey(key).parseClaimsJws(authToken);</span>
<span class="nc" id="L114">            String tenant=claimsJws.getBody().get(TENANT,String.class);</span>
<span class="nc" id="L115">            return tenant;</span>
<span class="nc" id="L116">        } catch (Exception e) {</span>
<span class="nc" id="L117">            log.error(&quot;Could not get all claims Token from passed token&quot;);</span>
<span class="nc" id="L118">            claims = null;</span>
        }
<span class="nc" id="L120">        return null;</span>
    }


    public String createToken() {
<span class="nc" id="L125">        String authorities = AuthoritiesConstants.ROLE_LYNCWORK_USERS+&quot;,&quot;+AuthoritiesConstants.ROLE_LYNCWORK_APPLICATIONS;</span>

<span class="nc" id="L127">        long now = (new Date()).getTime();</span>
<span class="nc" id="L128">        Date validity= new Date(now + this.tokenValidityInMillisecondsForRememberMe);</span>

<span class="nc" id="L130">        return Jwts.builder()</span>
<span class="nc" id="L131">                .setSubject(&quot;system&quot;)</span>
<span class="nc" id="L132">                .claim(AUTHORITIES_KEY, authorities)</span>
<span class="nc" id="L133">                .claim(TENANT, TenantContext.getCurrentTenant())</span>
<span class="nc" id="L134">                .signWith(key, SignatureAlgorithm.HS512)</span>
<span class="nc" id="L135">                .setExpiration(validity)</span>
<span class="nc" id="L136">                .compact();</span>
    }


}
</pre><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.5.201910111838</span></div></body></html>