package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Address;
import com.lyncwork.services.store.domain.BasicCompany;
import com.lyncwork.services.store.domain.BasicLyncWorkUser;
import com.lyncwork.services.store.domain.BasicRole;
import com.lyncwork.services.store.domain.BasicTeam;
import com.lyncwork.services.store.domain.EmailMessage;
import com.lyncwork.services.store.domain.LyncWorkUser;
import com.lyncwork.services.store.domain.Role;
import com.lyncwork.services.store.domain.Team;
import com.lyncwork.services.store.service.dto.AddressDTO;
import com.lyncwork.services.store.service.dto.BasicCompanyDTO;
import com.lyncwork.services.store.service.dto.BasicLyncWorkUserDTO;
import com.lyncwork.services.store.service.dto.BasicRoleDTO;
import com.lyncwork.services.store.service.dto.BasicTeamDTO;
import com.lyncwork.services.store.service.dto.EmailMessageDTO;
import com.lyncwork.services.store.service.dto.LyncWorkUserDTO;
import com.lyncwork.services.store.service.dto.RoleDTO;
import com.lyncwork.services.store.service.dto.TeamDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:48-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class LyncWorkUserMapperImpl implements LyncWorkUserMapper {

    @Autowired
    private RoleMapper roleMapper;
    @Autowired
    private AddressMapper addressMapper;
    @Autowired
    private EmailMessageMapper emailMessageMapper;
    @Autowired
    private TeamMapper teamMapper;
    @Autowired
    private CompanyMapper companyMapper;

    @Override
    public List<LyncWorkUser> toEntity(List<LyncWorkUserDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<LyncWorkUser> list = new ArrayList<LyncWorkUser>( dtoList.size() );
        for ( LyncWorkUserDTO lyncWorkUserDTO : dtoList ) {
            list.add( toEntity( lyncWorkUserDTO ) );
        }

        return list;
    }

    @Override
    public List<LyncWorkUserDTO> toDto(List<LyncWorkUser> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<LyncWorkUserDTO> list = new ArrayList<LyncWorkUserDTO>( entityList.size() );
        for ( LyncWorkUser lyncWorkUser : entityList ) {
            list.add( toDto( lyncWorkUser ) );
        }

        return list;
    }

    @Override
    public LyncWorkUserDTO toDto(LyncWorkUser entity) {
        avoidBackreference( entity );

        if ( entity == null ) {
            return null;
        }

        LyncWorkUserDTO lyncWorkUserDTO = new LyncWorkUserDTO();

        lyncWorkUserDTO.setEmailMessages( emailMessageSetToEmailMessageDTOSet( entity.getEmailMessages() ) );
        lyncWorkUserDTO.setAddresses( addressSetToAddressDTOSet( entity.getAddresses() ) );
        lyncWorkUserDTO.setProvisionUserDate( entity.getProvisionUserDate() );
        lyncWorkUserDTO.setTeams( teamSetToTeamDTOSet( entity.getTeams() ) );
        lyncWorkUserDTO.setRoles( roleSetToRoleDTOSet( entity.getRoles() ) );
        lyncWorkUserDTO.setTermsAndConditionsAcceptDate( entity.getTermsAndConditionsAcceptDate() );
        lyncWorkUserDTO.setDob( entity.getDob() );
        lyncWorkUserDTO.setProvisionUser( entity.getProvisionUser() );
        lyncWorkUserDTO.setCompany( companyMapper.toDto( entity.getCompany() ) );
        lyncWorkUserDTO.setPosition( entity.getPosition() );
        lyncWorkUserDTO.setEmployeeAgreementAcceptDate( entity.getEmployeeAgreementAcceptDate() );
        lyncWorkUserDTO.setActivationToken( entity.getActivationToken() );
        lyncWorkUserDTO.setId( entity.getId() );
        lyncWorkUserDTO.setAvatar( entity.getAvatar() );
        lyncWorkUserDTO.setFirstName( entity.getFirstName() );
        lyncWorkUserDTO.setLastName( entity.getLastName() );
        lyncWorkUserDTO.setLastLoginDate( entity.getLastLoginDate() );
        lyncWorkUserDTO.setUserStatus( entity.getUserStatus() );
        lyncWorkUserDTO.setExpirationDate( entity.getExpirationDate() );
        lyncWorkUserDTO.setPhonePrimary( entity.getPhonePrimary() );
        lyncWorkUserDTO.setEmailPrimary( entity.getEmailPrimary() );
        lyncWorkUserDTO.setEmailSecondary( entity.getEmailSecondary() );
        lyncWorkUserDTO.setPhoneSecondary( entity.getPhoneSecondary() );
        lyncWorkUserDTO.setPhoneSecondary2( entity.getPhoneSecondary2() );
        lyncWorkUserDTO.setManager( basicLyncWorkUserToBasicLyncWorkUserDTO( entity.getManager() ) );
        lyncWorkUserDTO.setMentor( basicLyncWorkUserToBasicLyncWorkUserDTO( entity.getMentor() ) );
        lyncWorkUserDTO.setUsername( entity.getUsername() );
        lyncWorkUserDTO.setItPrime( basicLyncWorkUserToBasicLyncWorkUserDTO( entity.getItPrime() ) );
        lyncWorkUserDTO.setHrPrime( basicLyncWorkUserToBasicLyncWorkUserDTO( entity.getHrPrime() ) );
        lyncWorkUserDTO.setLinkedinUrl( entity.getLinkedinUrl() );

        setSubscriptions( entity, lyncWorkUserDTO );

        return lyncWorkUserDTO;
    }

    @Override
    public LyncWorkUser toEntity(LyncWorkUserDTO dto) {
        if ( dto == null ) {
            return null;
        }

        LyncWorkUser lyncWorkUser = new LyncWorkUser();

        lyncWorkUser.setEmailMessages( emailMessageDTOSetToEmailMessageSet( dto.getEmailMessages() ) );
        lyncWorkUser.setAddresses( addressDTOSetToAddressSet( dto.getAddresses() ) );
        lyncWorkUser.provisionUserDate( dto.getProvisionUserDate() );
        lyncWorkUser.setTeams( teamDTOSetToTeamSet( dto.getTeams() ) );
        lyncWorkUser.setRoles( roleDTOSetToRoleSet( dto.getRoles() ) );
        lyncWorkUser.termsAndConditionsAcceptDate( dto.getTermsAndConditionsAcceptDate() );
        lyncWorkUser.dob( dto.getDob() );
        lyncWorkUser.provisionUser( dto.getProvisionUser() );
        lyncWorkUser.setCompany( companyMapper.toEntity( dto.getCompany() ) );
        lyncWorkUser.position( dto.getPosition() );
        lyncWorkUser.employeeAgreementAcceptDate( dto.getEmployeeAgreementAcceptDate() );
        lyncWorkUser.activationToken( dto.getActivationToken() );
        lyncWorkUser.setAvatar( dto.getAvatar() );
        lyncWorkUser.id( dto.getId() );
        lyncWorkUser.setFirstName( dto.getFirstName() );
        lyncWorkUser.setLastName( dto.getLastName() );
        lyncWorkUser.setUsername( dto.getUsername() );
        lyncWorkUser.setLastLoginDate( dto.getLastLoginDate() );
        lyncWorkUser.setUserStatus( dto.getUserStatus() );
        lyncWorkUser.setExpirationDate( dto.getExpirationDate() );
        lyncWorkUser.setPhonePrimary( dto.getPhonePrimary() );
        lyncWorkUser.setEmailPrimary( dto.getEmailPrimary() );
        lyncWorkUser.setEmailSecondary( dto.getEmailSecondary() );
        lyncWorkUser.setPhoneSecondary( dto.getPhoneSecondary() );
        lyncWorkUser.setPhoneSecondary2( dto.getPhoneSecondary2() );
        lyncWorkUser.linkedinUrl( dto.getLinkedinUrl() );
        lyncWorkUser.setManager( basicLyncWorkUserDTOToBasicLyncWorkUser( dto.getManager() ) );
        lyncWorkUser.setMentor( basicLyncWorkUserDTOToBasicLyncWorkUser( dto.getMentor() ) );
        lyncWorkUser.setItPrime( basicLyncWorkUserDTOToBasicLyncWorkUser( dto.getItPrime() ) );
        lyncWorkUser.setHrPrime( basicLyncWorkUserDTOToBasicLyncWorkUser( dto.getHrPrime() ) );

        return lyncWorkUser;
    }

    protected Set<EmailMessageDTO> emailMessageSetToEmailMessageDTOSet(Set<EmailMessage> set) {
        if ( set == null ) {
            return null;
        }

        Set<EmailMessageDTO> set1 = new HashSet<EmailMessageDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( EmailMessage emailMessage : set ) {
            set1.add( emailMessageMapper.toDto( emailMessage ) );
        }

        return set1;
    }

    protected Set<AddressDTO> addressSetToAddressDTOSet(Set<Address> set) {
        if ( set == null ) {
            return null;
        }

        Set<AddressDTO> set1 = new HashSet<AddressDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Address address : set ) {
            set1.add( addressMapper.toDto( address ) );
        }

        return set1;
    }

    protected Set<TeamDTO> teamSetToTeamDTOSet(Set<Team> set) {
        if ( set == null ) {
            return null;
        }

        Set<TeamDTO> set1 = new HashSet<TeamDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Team team : set ) {
            set1.add( teamMapper.toDto( team ) );
        }

        return set1;
    }

    protected Set<RoleDTO> roleSetToRoleDTOSet(Set<Role> set) {
        if ( set == null ) {
            return null;
        }

        Set<RoleDTO> set1 = new HashSet<RoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Role role : set ) {
            set1.add( roleMapper.toDto( role ) );
        }

        return set1;
    }

    protected BasicRoleDTO basicRoleToBasicRoleDTO(BasicRole basicRole) {
        if ( basicRole == null ) {
            return null;
        }

        BasicRoleDTO basicRoleDTO = new BasicRoleDTO();

        basicRoleDTO.setId( basicRole.getId() );
        basicRoleDTO.setRoleName( basicRole.getRoleName() );

        return basicRoleDTO;
    }

    protected Set<BasicRoleDTO> basicRoleSetToBasicRoleDTOSet(Set<BasicRole> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicRoleDTO> set1 = new HashSet<BasicRoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicRole basicRole : set ) {
            set1.add( basicRoleToBasicRoleDTO( basicRole ) );
        }

        return set1;
    }

    protected BasicTeamDTO basicTeamToBasicTeamDTO(BasicTeam basicTeam) {
        if ( basicTeam == null ) {
            return null;
        }

        BasicTeamDTO basicTeamDTO = new BasicTeamDTO();

        basicTeamDTO.setId( basicTeam.getId() );
        basicTeamDTO.setTeamName( basicTeam.getTeamName() );
        basicTeamDTO.setTeamColor( basicTeam.getTeamColor() );

        return basicTeamDTO;
    }

    protected Set<BasicTeamDTO> basicTeamSetToBasicTeamDTOSet(Set<BasicTeam> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicTeamDTO> set1 = new HashSet<BasicTeamDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicTeam basicTeam : set ) {
            set1.add( basicTeamToBasicTeamDTO( basicTeam ) );
        }

        return set1;
    }

    protected Set<AddressDTO> addressSetToAddressDTOSet1(Set<Address> set) {
        if ( set == null ) {
            return null;
        }

        Set<AddressDTO> set1 = new HashSet<AddressDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Address address : set ) {
            set1.add( addressMapper.toDto( address ) );
        }

        return set1;
    }

    protected BasicCompanyDTO basicCompanyToBasicCompanyDTO(BasicCompany basicCompany) {
        if ( basicCompany == null ) {
            return null;
        }

        BasicCompanyDTO basicCompanyDTO = new BasicCompanyDTO();

        basicCompanyDTO.setId( basicCompany.getId() );
        basicCompanyDTO.setAddresses( addressSetToAddressDTOSet1( basicCompany.getAddresses() ) );
        basicCompanyDTO.setCompanyName( basicCompany.getCompanyName() );

        return basicCompanyDTO;
    }

    protected BasicLyncWorkUserDTO basicLyncWorkUserToBasicLyncWorkUserDTO(BasicLyncWorkUser basicLyncWorkUser) {
        if ( basicLyncWorkUser == null ) {
            return null;
        }

        BasicLyncWorkUserDTO basicLyncWorkUserDTO = new BasicLyncWorkUserDTO();

        basicLyncWorkUserDTO.setId( basicLyncWorkUser.getId() );
        basicLyncWorkUserDTO.setFirstName( basicLyncWorkUser.getFirstName() );
        basicLyncWorkUserDTO.setLastName( basicLyncWorkUser.getLastName() );
        basicLyncWorkUserDTO.setAvatar( basicLyncWorkUser.getAvatar() );
        basicLyncWorkUserDTO.setPhonePrimary( basicLyncWorkUser.getPhonePrimary() );
        basicLyncWorkUserDTO.setEmailPrimary( basicLyncWorkUser.getEmailPrimary() );
        basicLyncWorkUserDTO.setRoles( basicRoleSetToBasicRoleDTOSet( basicLyncWorkUser.getRoles() ) );
        basicLyncWorkUserDTO.setTeams( basicTeamSetToBasicTeamDTOSet( basicLyncWorkUser.getTeams() ) );
        basicLyncWorkUserDTO.setCompany( basicCompanyToBasicCompanyDTO( basicLyncWorkUser.getCompany() ) );
        basicLyncWorkUserDTO.setUserStatus( basicLyncWorkUser.getUserStatus() );
        basicLyncWorkUserDTO.setLinkedinUrl( basicLyncWorkUser.getLinkedinUrl() );

        return basicLyncWorkUserDTO;
    }

    protected Set<EmailMessage> emailMessageDTOSetToEmailMessageSet(Set<EmailMessageDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<EmailMessage> set1 = new HashSet<EmailMessage>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( EmailMessageDTO emailMessageDTO : set ) {
            set1.add( emailMessageMapper.toEntity( emailMessageDTO ) );
        }

        return set1;
    }

    protected Set<Address> addressDTOSetToAddressSet(Set<AddressDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Address> set1 = new HashSet<Address>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( AddressDTO addressDTO : set ) {
            set1.add( addressMapper.toEntity( addressDTO ) );
        }

        return set1;
    }

    protected Set<Team> teamDTOSetToTeamSet(Set<TeamDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Team> set1 = new HashSet<Team>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( TeamDTO teamDTO : set ) {
            set1.add( teamMapper.toEntity( teamDTO ) );
        }

        return set1;
    }

    protected Set<Role> roleDTOSetToRoleSet(Set<RoleDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Role> set1 = new HashSet<Role>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( RoleDTO roleDTO : set ) {
            set1.add( roleMapper.toEntity( roleDTO ) );
        }

        return set1;
    }

    protected Set<Address> addressDTOSetToAddressSet1(Set<AddressDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Address> set1 = new HashSet<Address>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( AddressDTO addressDTO : set ) {
            set1.add( addressMapper.toEntity( addressDTO ) );
        }

        return set1;
    }

    protected BasicCompany basicCompanyDTOToBasicCompany(BasicCompanyDTO basicCompanyDTO) {
        if ( basicCompanyDTO == null ) {
            return null;
        }

        BasicCompany basicCompany = new BasicCompany();

        basicCompany.setId( basicCompanyDTO.getId() );
        basicCompany.setCompanyName( basicCompanyDTO.getCompanyName() );
        basicCompany.setAddresses( addressDTOSetToAddressSet1( basicCompanyDTO.getAddresses() ) );

        return basicCompany;
    }

    protected BasicRole basicRoleDTOToBasicRole(BasicRoleDTO basicRoleDTO) {
        if ( basicRoleDTO == null ) {
            return null;
        }

        BasicRole basicRole = new BasicRole();

        basicRole.setId( basicRoleDTO.getId() );
        basicRole.setRoleName( basicRoleDTO.getRoleName() );

        return basicRole;
    }

    protected Set<BasicRole> basicRoleDTOSetToBasicRoleSet(Set<BasicRoleDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicRole> set1 = new HashSet<BasicRole>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicRoleDTO basicRoleDTO : set ) {
            set1.add( basicRoleDTOToBasicRole( basicRoleDTO ) );
        }

        return set1;
    }

    protected BasicTeam basicTeamDTOToBasicTeam(BasicTeamDTO basicTeamDTO) {
        if ( basicTeamDTO == null ) {
            return null;
        }

        BasicTeam basicTeam = new BasicTeam();

        basicTeam.setId( basicTeamDTO.getId() );
        basicTeam.setTeamName( basicTeamDTO.getTeamName() );
        basicTeam.setTeamColor( basicTeamDTO.getTeamColor() );

        return basicTeam;
    }

    protected Set<BasicTeam> basicTeamDTOSetToBasicTeamSet(Set<BasicTeamDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<BasicTeam> set1 = new HashSet<BasicTeam>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( BasicTeamDTO basicTeamDTO : set ) {
            set1.add( basicTeamDTOToBasicTeam( basicTeamDTO ) );
        }

        return set1;
    }

    protected BasicLyncWorkUser basicLyncWorkUserDTOToBasicLyncWorkUser(BasicLyncWorkUserDTO basicLyncWorkUserDTO) {
        if ( basicLyncWorkUserDTO == null ) {
            return null;
        }

        BasicLyncWorkUser basicLyncWorkUser = new BasicLyncWorkUser();

        basicLyncWorkUser.id( basicLyncWorkUserDTO.getId() );
        basicLyncWorkUser.setFirstName( basicLyncWorkUserDTO.getFirstName() );
        basicLyncWorkUser.setLastName( basicLyncWorkUserDTO.getLastName() );
        basicLyncWorkUser.setAvatar( basicLyncWorkUserDTO.getAvatar() );
        basicLyncWorkUser.setPhonePrimary( basicLyncWorkUserDTO.getPhonePrimary() );
        basicLyncWorkUser.setEmailPrimary( basicLyncWorkUserDTO.getEmailPrimary() );
        basicLyncWorkUser.setCompany( basicCompanyDTOToBasicCompany( basicLyncWorkUserDTO.getCompany() ) );
        basicLyncWorkUser.setRoles( basicRoleDTOSetToBasicRoleSet( basicLyncWorkUserDTO.getRoles() ) );
        basicLyncWorkUser.setTeams( basicTeamDTOSetToBasicTeamSet( basicLyncWorkUserDTO.getTeams() ) );
        basicLyncWorkUser.setUserStatus( basicLyncWorkUserDTO.getUserStatus() );
        basicLyncWorkUser.linkedinUrl( basicLyncWorkUserDTO.getLinkedinUrl() );

        return basicLyncWorkUser;
    }
}
