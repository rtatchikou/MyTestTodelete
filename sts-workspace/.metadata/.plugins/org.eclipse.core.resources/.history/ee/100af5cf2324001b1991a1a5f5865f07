package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Application;
import com.lyncwork.services.store.domain.ApplicationCategory;
import com.lyncwork.services.store.service.dto.ApplicationCategoryDTO;
import com.lyncwork.services.store.service.dto.ApplicationDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-10T19:26:39-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class ApplicationCategoryMapperImpl implements ApplicationCategoryMapper {

    @Autowired
    private ApplicationMapper applicationMapper;

    @Override
    public ApplicationCategory toEntity(ApplicationCategoryDTO dto) {
        if ( dto == null ) {
            return null;
        }

        ApplicationCategory applicationCategory = new ApplicationCategory();

        applicationCategory.setId( dto.getId() );
        applicationCategory.setApplications( applicationDTOSetToApplicationSet( dto.getApplications() ) );
        applicationCategory.setName( dto.getName() );

        return applicationCategory;
    }

    @Override
    public List<ApplicationCategory> toEntity(List<ApplicationCategoryDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<ApplicationCategory> list = new ArrayList<ApplicationCategory>( dtoList.size() );
        for ( ApplicationCategoryDTO applicationCategoryDTO : dtoList ) {
            list.add( toEntity( applicationCategoryDTO ) );
        }

        return list;
    }

    @Override
    public List<ApplicationCategoryDTO> toDto(List<ApplicationCategory> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<ApplicationCategoryDTO> list = new ArrayList<ApplicationCategoryDTO>( entityList.size() );
        for ( ApplicationCategory applicationCategory : entityList ) {
            list.add( toDto( applicationCategory ) );
        }

        return list;
    }

    @Override
    public ApplicationCategoryDTO toDto(ApplicationCategory entity) {
        if ( entity == null ) {
            return null;
        }

        ApplicationCategoryDTO applicationCategoryDTO = new ApplicationCategoryDTO();

        applicationCategoryDTO.setId( entity.getId() );
        applicationCategoryDTO.setName( entity.getName() );

        return applicationCategoryDTO;
    }

    protected Set<Application> applicationDTOSetToApplicationSet(Set<ApplicationDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Application> set1 = new HashSet<Application>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationDTO applicationDTO : set ) {
            set1.add( applicationMapper.toEntity( applicationDTO ) );
        }

        return set1;
    }
}
