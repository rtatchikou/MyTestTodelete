<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>SecurityConfiguration.java</title><link rel="stylesheet" href="../jacoco-resources/prettify.css" type="text/css"/><script type="text/javascript" src="../jacoco-resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Dropbox</a> &gt; <a href="index.source.html" class="el_package">com.lyncwork.services.dropbox.config</a> &gt; <span class="el_source">SecurityConfiguration.java</span></div><h1>SecurityConfiguration.java</h1><pre class="source lang-java linenums">package com.lyncwork.services.dropbox.config;

import com.lyncwork.services.dropbox.security.jwt.JWTConfigurer;
import com.lyncwork.services.dropbox.security.jwt.TokenProvider;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.header.writers.ReferrerPolicyHeaderWriter;
import org.zalando.problem.spring.web.advice.security.SecurityProblemSupport;


@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
@Import(SecurityProblemSupport.class)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

    private final TokenProvider tokenProvider;
    private final SecurityProblemSupport problemSupport;
//
//    @Value(&quot;${whitelist.ip}&quot;)
//    private String whiteListIp;

<span class="nc" id="L30">    public SecurityConfiguration(TokenProvider tokenProvider, SecurityProblemSupport problemSupport) {</span>
<span class="nc" id="L31">        this.tokenProvider = tokenProvider;</span>
<span class="nc" id="L32">        this.problemSupport = problemSupport;</span>
<span class="nc" id="L33">    }</span>
    @Override
    public void configure(WebSecurity web) {
<span class="nc" id="L36">        web.ignoring()</span>
<span class="nc" id="L37">            .antMatchers(&quot;/h2-console/**&quot;);</span>
<span class="nc" id="L38">    }</span>

    @Bean
    public PasswordEncoder passwordEncoder() {
<span class="nc" id="L42">        return new BCryptPasswordEncoder();</span>
    }

    @Override
    public void configure(HttpSecurity http) throws Exception {
        // @formatter:off
<span class="nc" id="L48">        http</span>
<span class="nc" id="L49">            .csrf()</span>
<span class="nc" id="L50">            .disable()</span>
<span class="nc" id="L51">            .exceptionHandling()</span>
<span class="nc" id="L52">            .authenticationEntryPoint(problemSupport)</span>
<span class="nc" id="L53">            .accessDeniedHandler(problemSupport)</span>
<span class="nc" id="L54">            .and()</span>
<span class="nc" id="L55">            .headers()</span>
<span class="nc" id="L56">            .contentSecurityPolicy(&quot;default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:&quot;)</span>
<span class="nc" id="L57">            .and()</span>
<span class="nc" id="L58">            .referrerPolicy(ReferrerPolicyHeaderWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN)</span>
<span class="nc" id="L59">            .and()</span>
<span class="nc" id="L60">            .featurePolicy(&quot;geolocation 'none'; midi 'none'; sync-xhr 'none'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; speaker 'none'; fullscreen 'self'; payment 'none'&quot;)</span>
<span class="nc" id="L61">            .and()</span>
<span class="nc" id="L62">            .frameOptions()</span>
<span class="nc" id="L63">            .deny()</span>
<span class="nc" id="L64">            .and()</span>
<span class="nc" id="L65">            .sessionManagement()</span>
<span class="nc" id="L66">            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span>
<span class="nc" id="L67">            .and()</span>
<span class="nc" id="L68">            .authorizeRequests()</span>
<span class="nc" id="L69">            .antMatchers(&quot;/api/provision/*&quot;).authenticated()</span>
<span class="nc" id="L70">            .antMatchers(&quot;/api/*&quot;).permitAll()</span>
<span class="nc" id="L71">            .antMatchers(&quot;/dropbox&quot;).permitAll()</span>
<span class="nc" id="L72">            .and()</span>
<span class="nc" id="L73">            .apply(securityConfigurerAdapter());</span>
        // @formatter:on
<span class="nc" id="L75">        http.cors();</span>
<span class="nc" id="L76">    }</span>

    private JWTConfigurer securityConfigurerAdapter() {
<span class="nc" id="L79">        return new JWTConfigurer(tokenProvider);</span>
    }
}
</pre><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.5.201910111838</span></div></body></html>