package com.lyncwork.services.hellosign.web.rest;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.lyncwork.services.hellosign.client.dropbox.service.TeamFolderService;
import com.lyncwork.services.hellosign.client.dropbox.utils.Constants;
import com.lyncwork.services.hellosign.model.request.ProvisionTenantRequest;
import com.lyncwork.services.hellosign.model.response.DownloadResponse;
import com.lyncwork.services.hellosign.model.response.ListFilesResponse;
import com.lyncwork.services.hellosign.model.response.ProvisionTenantResponse;
import com.lyncwork.services.hellosign.model.response.UploadResponse;
import com.lyncwork.services.hellosign.repository.hibernate.TenantContext;
import com.lyncwork.services.hellosign.security.SecurityUtils;
import com.lyncwork.services.hellosign.service.CompanyService;

import javax.servlet.http.HttpServletResponse;

@RestController
@RequestMapping("/api")
public class CompanyResource {

    @Autowired
    private TeamFolderService teamFolderService;

    @Autowired
    private CompanyService companyService;

    private final Logger log = LoggerFactory.getLogger(CompanyResource.class);


    @PostMapping("/provision/tenant")
    public ResponseEntity<ProvisionTenantResponse> provisionTenant( @RequestBody ProvisionTenantRequest provisionTenant) {
        String tenantId = TenantContext.getCurrentTenant();
        log.debug("Creating a Dropbox hub for tenant: {}", tenantId);
        ProvisionTenantResponse  response = companyService.provisionTenant(tenantId, provisionTenant);
        return ResponseEntity.ok().body(response);
    }

    @PostMapping(value = "/upload", consumes = {"multipart/form-data", "application/json"})
    public ResponseEntity<UploadResponse> upload(@RequestParam("file") MultipartFile file) {

        String tenantId = TenantContext.getCurrentTenant();
        String userName = null;
        if(SecurityUtils.getCurrentUserLogin().isPresent()){
            userName = SecurityUtils.getCurrentUserLogin().get();
        }
        UploadResponse  response = companyService.upload(file,tenantId,userName);

        return ResponseEntity.ok().body(response);
    }

    @GetMapping("/download/file/{fileId}")
    public ResponseEntity<Resource> download(HttpServletResponse httpServletResponse, @PathVariable("fileId") String fileId ) {

        String tenantId = TenantContext.getCurrentTenant();

        DownloadResponse response = companyService.download(fileId, tenantId);

        HttpHeaders headers = new HttpHeaders();
        headers.add(Constants.HEADER_FILE_INFO,response.getFileInfo() );

        return ResponseEntity.ok().headers(headers).body(response.getData());
    }

    @GetMapping("/tenant/files/list")
    public ResponseEntity<ListFilesResponse> getTeamFileList() {
        String tenantId = TenantContext.getCurrentTenant();
        ListFilesResponse response = companyService.getTeamFileList(tenantId);

        return ResponseEntity.ok().body(response);
    }

}
