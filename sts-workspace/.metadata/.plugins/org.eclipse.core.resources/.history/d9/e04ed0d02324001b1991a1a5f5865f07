package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.SubscriptionApp;
import com.lyncwork.services.store.domain.SubscriptionAppProperty;
import com.lyncwork.services.store.service.dto.SubscriptionAppDTO;
import com.lyncwork.services.store.service.dto.SubscriptionAppPropertyDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-10T19:26:39-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class SubscriptionAppMapperImpl implements SubscriptionAppMapper {

    @Autowired
    private ApplicationMapper applicationMapper;
    @Autowired
    private SubscriptionAppPropertyMapper subscriptionAppPropertyMapper;

    @Override
    public List<SubscriptionApp> toEntity(List<SubscriptionAppDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<SubscriptionApp> list = new ArrayList<SubscriptionApp>( dtoList.size() );
        for ( SubscriptionAppDTO subscriptionAppDTO : dtoList ) {
            list.add( toEntity( subscriptionAppDTO ) );
        }

        return list;
    }

    @Override
    public List<SubscriptionAppDTO> toDto(List<SubscriptionApp> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<SubscriptionAppDTO> list = new ArrayList<SubscriptionAppDTO>( entityList.size() );
        for ( SubscriptionApp subscriptionApp : entityList ) {
            list.add( toDto( subscriptionApp ) );
        }

        return list;
    }

    @Override
    public SubscriptionAppDTO toDto(SubscriptionApp subscriptionApp) {
        avoidBackreference( subscriptionApp );

        if ( subscriptionApp == null ) {
            return null;
        }

        SubscriptionAppDTO subscriptionAppDTO = new SubscriptionAppDTO();

        subscriptionAppDTO.setApplication( applicationMapper.toDto( subscriptionApp.getApplication() ) );
        subscriptionAppDTO.setProperties( subscriptionAppPropertySetToSubscriptionAppPropertyDTOSet( subscriptionApp.getProperties() ) );
        subscriptionAppDTO.setId( subscriptionApp.getId() );
        subscriptionAppDTO.setStatus( subscriptionApp.isStatus() );
        subscriptionAppDTO.setActivationDate( subscriptionApp.getActivationDate() );
        subscriptionAppDTO.setExpirationDate( subscriptionApp.getExpirationDate() );

        return subscriptionAppDTO;
    }

    @Override
    public SubscriptionApp toEntity(SubscriptionAppDTO subscriptionAppDTO) {
        if ( subscriptionAppDTO == null ) {
            return null;
        }

        SubscriptionApp subscriptionApp = new SubscriptionApp();

        subscriptionApp.setApplication( applicationMapper.toEntity( subscriptionAppDTO.getApplication() ) );
        subscriptionApp.setProperties( subscriptionAppPropertyDTOSetToSubscriptionAppPropertySet( subscriptionAppDTO.getProperties() ) );
        subscriptionApp.setId( subscriptionAppDTO.getId() );
        subscriptionApp.setStatus( subscriptionAppDTO.isStatus() );
        subscriptionApp.setActivationDate( subscriptionAppDTO.getActivationDate() );
        subscriptionApp.setExpirationDate( subscriptionAppDTO.getExpirationDate() );

        updateBackreference( subscriptionApp );

        return subscriptionApp;
    }

    protected Set<SubscriptionAppPropertyDTO> subscriptionAppPropertySetToSubscriptionAppPropertyDTOSet(Set<SubscriptionAppProperty> set) {
        if ( set == null ) {
            return null;
        }

        Set<SubscriptionAppPropertyDTO> set1 = new HashSet<SubscriptionAppPropertyDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( SubscriptionAppProperty subscriptionAppProperty : set ) {
            set1.add( subscriptionAppPropertyMapper.toDto( subscriptionAppProperty ) );
        }

        return set1;
    }

    protected Set<SubscriptionAppProperty> subscriptionAppPropertyDTOSetToSubscriptionAppPropertySet(Set<SubscriptionAppPropertyDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<SubscriptionAppProperty> set1 = new HashSet<SubscriptionAppProperty>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( SubscriptionAppPropertyDTO subscriptionAppPropertyDTO : set ) {
            set1.add( subscriptionAppPropertyMapper.toEntity( subscriptionAppPropertyDTO ) );
        }

        return set1;
    }
}
