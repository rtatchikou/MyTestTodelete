package com.lyncwork.services.gusto.processors;

import com.lyncwork.services.expensify.client.expensify.payload.LyncWorkUser;
import com.lyncwork.services.expensify.domain.UserIntegrationAction;
import com.lyncwork.services.expensify.domain.UserIntegrationStatus;
import com.lyncwork.services.gusto.service.IntgrationService.UserIntegrationQueueService;
import com.lyncwork.services.gusto.service.dto.UserIntegrationMessageDTO;
import com.lyncwork.services.gusto.service.dto.UserIntegrationQueueDTO;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.util.CollectionUtils;

import java.util.List;

public abstract class Processor {

   public abstract <T> T provisionUser(LyncWorkUser lyncWorkUser);

   public abstract void deprovisionUser(LyncWorkUser LyncWorkUser);

   public abstract String getApplicationName();

    public abstract UserIntegrationQueueService getUserIntegrationQueueService();

    @Scheduled(fixedRate = 60000)
    public void consumeMessageQueue(){
        List<UserIntegrationQueueDTO> userIntegrationQueueDTOS = getUserIntegrationQueueService().findAllByConsumerAndStatus(getApplicationName(), UserIntegrationStatus.CREATED);

        if (!CollectionUtils.isEmpty(userIntegrationQueueDTOS)){
            userIntegrationQueueDTOS
                .stream()
                .forEach(m -> {
                    UserIntegrationMessageDTO userIntegrationMessageDTO = m.getMessage();

                    if (UserIntegrationAction.PROVISION.equals(userIntegrationMessageDTO.getAction())){
                        provisionUser( userIntegrationMessageDTO.getMessage().getLyncWorkUser());
                    } else if (UserIntegrationAction.DEPROVISION.equals(m.getMessage().getAction())){
                       deprovisionUser(userIntegrationMessageDTO.getMessage().getLyncWorkUser());
                    }

                    m.setStatus(UserIntegrationStatus.CONSUMED);
                    getUserIntegrationQueueService().save(m);
                });
        }
    }

}
