package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Role;
import com.lyncwork.services.store.domain.Team;
import com.lyncwork.services.store.domain.Workflow;
import com.lyncwork.services.store.service.dto.RoleDTO;
import com.lyncwork.services.store.service.dto.TeamDTO;
import com.lyncwork.services.store.service.dto.WorkflowDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-10T19:26:39-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class WorkflowMapperImpl implements WorkflowMapper {

    @Autowired
    private TeamMapper teamMapper;
    @Autowired
    private RoleMapper roleMapper;
    @Autowired
    private WorkflowTaskMapper workflowTaskMapper;

    @Override
    public List<Workflow> toEntity(List<WorkflowDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<Workflow> list = new ArrayList<Workflow>( dtoList.size() );
        for ( WorkflowDTO workflowDTO : dtoList ) {
            list.add( toEntity( workflowDTO ) );
        }

        return list;
    }

    @Override
    public List<WorkflowDTO> toDto(List<Workflow> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<WorkflowDTO> list = new ArrayList<WorkflowDTO>( entityList.size() );
        for ( Workflow workflow : entityList ) {
            list.add( toDto( workflow ) );
        }

        return list;
    }

    @Override
    public Workflow toEntity(WorkflowDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Workflow workflow = new Workflow();

        workflow.setWorkflowTasks( workflowTaskMapper.toEntity( dto.getWorkflowTasks() ) );
        workflow.setTeams( teamDTOSetToTeamSet( dto.getTeams() ) );
        workflow.setRoles( roleDTOSetToRoleSet( dto.getRoles() ) );
        workflow.id( dto.getId() );
        workflow.setWorkflowName( dto.getWorkflowName() );
        workflow.workflowDesc( dto.getWorkflowDesc() );
        workflow.active( dto.getActive() );

        setWorkflowTasks( workflow );

        return workflow;
    }

    @Override
    public WorkflowDTO toDto(Workflow entity) {
        if ( entity == null ) {
            return null;
        }

        WorkflowDTO workflowDTO = new WorkflowDTO();

        workflowDTO.setWorkflowTasks( workflowTaskMapper.toDto( entity.getWorkflowTasks() ) );
        workflowDTO.setTeams( teamSetToTeamDTOSet( entity.getTeams() ) );
        workflowDTO.setRoles( roleSetToRoleDTOSet( entity.getRoles() ) );
        workflowDTO.setId( entity.getId() );
        workflowDTO.setActive( entity.getActive() );
        workflowDTO.setWorkflowName( entity.getWorkflowName() );
        workflowDTO.setWorkflowDesc( entity.getWorkflowDesc() );

        return workflowDTO;
    }

    protected Set<Team> teamDTOSetToTeamSet(Set<TeamDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Team> set1 = new HashSet<Team>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( TeamDTO teamDTO : set ) {
            set1.add( teamMapper.toEntity( teamDTO ) );
        }

        return set1;
    }

    protected Set<Role> roleDTOSetToRoleSet(Set<RoleDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Role> set1 = new HashSet<Role>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( RoleDTO roleDTO : set ) {
            set1.add( roleMapper.toEntity( roleDTO ) );
        }

        return set1;
    }

    protected Set<TeamDTO> teamSetToTeamDTOSet(Set<Team> set) {
        if ( set == null ) {
            return null;
        }

        Set<TeamDTO> set1 = new HashSet<TeamDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Team team : set ) {
            set1.add( teamMapper.toDto( team ) );
        }

        return set1;
    }

    protected Set<RoleDTO> roleSetToRoleDTOSet(Set<Role> set) {
        if ( set == null ) {
            return null;
        }

        Set<RoleDTO> set1 = new HashSet<RoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Role role : set ) {
            set1.add( roleMapper.toDto( role ) );
        }

        return set1;
    }
}
