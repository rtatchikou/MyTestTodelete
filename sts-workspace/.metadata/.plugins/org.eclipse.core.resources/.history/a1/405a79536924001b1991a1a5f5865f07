package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Task;
import com.lyncwork.services.store.domain.TaskProperty;
import com.lyncwork.services.store.service.dto.TaskDTO;
import com.lyncwork.services.store.service.dto.TaskPropertyDTO;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:47-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class TaskMapperImpl implements TaskMapper {

    @Autowired
    private TaskPropertyMapper taskPropertyMapper;

    @Override
    public List<Task> toEntity(List<TaskDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<Task> list = new ArrayList<Task>( dtoList.size() );
        for ( TaskDTO taskDTO : dtoList ) {
            list.add( toEntity( taskDTO ) );
        }

        return list;
    }

    @Override
    public List<TaskDTO> toDto(List<Task> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<TaskDTO> list = new ArrayList<TaskDTO>( entityList.size() );
        for ( Task task : entityList ) {
            list.add( toDto( task ) );
        }

        return list;
    }

    @Override
    public Task toEntity(TaskDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Task task = new Task();

        task.taskDesc( dto.getTaskDesc() );
        task.setTaskProperties( stringTaskPropertyDTOMapToStringTaskPropertyMap( dto.getTaskProperties() ) );
        task.taskType( dto.getTaskType() );
        task.setId( dto.getId() );
        task.setTaskEventName( dto.getTaskEventName() );
        task.setTaskEventIndicator( dto.getTaskEventIndicator() );
        task.setTaskEventOrder( dto.getTaskEventOrder() );
        task.setDaysBeforeStart( dto.getDaysBeforeStart() );
        task.setDaysToComplete( dto.getDaysToComplete() );

        return task;
    }

    @Override
    public TaskDTO toDto(Task entity) {
        if ( entity == null ) {
            return null;
        }

        TaskDTO taskDTO = new TaskDTO();

        taskDTO.setTaskDesc( entity.getTaskDesc() );
        taskDTO.setTaskProperties( stringTaskPropertyMapToStringTaskPropertyDTOMap( entity.getTaskProperties() ) );
        taskDTO.setTaskType( entity.getTaskType() );
        taskDTO.setId( entity.getId() );
        taskDTO.setTaskEventName( entity.getTaskEventName() );
        taskDTO.setTaskEventIndicator( entity.getTaskEventIndicator() );
        taskDTO.setTaskEventOrder( entity.getTaskEventOrder() );
        taskDTO.setDaysBeforeStart( entity.getDaysBeforeStart() );
        taskDTO.setDaysToComplete( entity.getDaysToComplete() );

        return taskDTO;
    }

    protected Map<String, TaskProperty> stringTaskPropertyDTOMapToStringTaskPropertyMap(Map<String, TaskPropertyDTO> map) {
        if ( map == null ) {
            return null;
        }

        Map<String, TaskProperty> map1 = new HashMap<String, TaskProperty>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );

        for ( java.util.Map.Entry<String, TaskPropertyDTO> entry : map.entrySet() ) {
            String key = entry.getKey();
            TaskProperty value = taskPropertyMapper.toEntity( entry.getValue() );
            map1.put( key, value );
        }

        return map1;
    }

    protected Map<String, TaskPropertyDTO> stringTaskPropertyMapToStringTaskPropertyDTOMap(Map<String, TaskProperty> map) {
        if ( map == null ) {
            return null;
        }

        Map<String, TaskPropertyDTO> map1 = new HashMap<String, TaskPropertyDTO>( Math.max( (int) ( map.size() / .75f ) + 1, 16 ) );

        for ( java.util.Map.Entry<String, TaskProperty> entry : map.entrySet() ) {
            String key = entry.getKey();
            TaskPropertyDTO value = taskPropertyMapper.toDto( entry.getValue() );
            map1.put( key, value );
        }

        return map1;
    }
}
