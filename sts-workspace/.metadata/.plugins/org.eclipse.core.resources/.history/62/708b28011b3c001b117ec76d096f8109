package com.lyncwork.services.expensify.client.expensify.service;

import com.lyncwork.services.expensify.client.expensify.client.ExpensifyClient;
import com.lyncwork.services.expensify.client.store.Response.SubscriptionAppResponse;
import com.lyncwork.services.expensify.client.store.client.SubscriptionAppClient;
import com.lyncwork.services.expensify.processors.Constants;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class ExpensifyService {
    private static final Logger logger = LoggerFactory.getLogger(ExpensifyService.class);
    @Autowired
    ExpensifyClient expensifyClient;
    @Autowired
    SubscriptionAppClient subscriptionAppClient;

    public ExpensifyParameters getExpensifyParameters() {
        SubscriptionAppResponse subscriptionAppResponse = subscriptionAppClient.getApplicationProperties(Constants.APPLICATION_NAME);
        ExpensifyParameters expensifyParameters = new ExpensifyParameters();

        if (subscriptionAppResponse != null) {
            Set<SubscriptionAppResponse.SubscriptionAppPropertyDTO> properties = subscriptionAppResponse.getProperties();
            if (properties != null && !properties.isEmpty()) {
                properties.stream().forEach(p -> {
                    switch (p.getKey().toLowerCase()) {
                        case Constants.EXPENSIFY_REDIRECT_URI:
                        	expensifyParameters.setRedirectUri((String) p.getValue());
                            break;
                        case Constants.EXPENSIFY_CLIENT_ID:
                        	expensifyParameters.setClientId((String) p.getValue());
                            break;
                        case Constants.EXPENSIFY_CLIENT_SECRET:
                        	expensifyParameters.setClientSecret((String) p.getValue());
                            break;
                        case Constants.EXPENSIFY_REFRESH_TOKEN:
                        	expensifyParameters.setRefreshToken((String) p.getValue());
                            break;
                        case Constants.EXPENSIFY_ACCESS_TOKEN:
                        	expensifyParameters.setAccessToken((String) p.getValue());
                            break;
                        case Constants.EXPENSIFY_COMPANY_ID:
                        	expensifyParameters.setCompanyId((String) p.getValue());
                            break;
                        case Constants.EXPENSIFY_FRONTEND_REDIRECT_URL:
                        	expensifyParameters.setFrontendRedirectUrl((String) p.getValue());
                            break;
                        default:
                            break;
                    }
                });

            }
        }

        return expensifyParameters;
    }

    public String saveExpensifyProperties(Map<String, Object> responseCode) {
        SubscriptionAppResponse subscriptionApp = subscriptionAppClient.getApplicationProperties(Constants.APPLICATION_NAME);

        List<String> keys = responseCode.keySet().stream()
            .collect(Collectors.toList());
        Set<SubscriptionAppResponse.SubscriptionAppPropertyDTO> propertySet = subscriptionApp.getProperties();

        propertySet.stream().filter(p -> keys.contains(p.getKey()) || keys.contains(p.getKey().toLowerCase())).forEach(p -> {
            p.setValue(responseCode.get(p.getKey()));
            responseCode.remove(p.getKey());
        });

        Set<SubscriptionAppResponse.SubscriptionAppPropertyDTO> newPropertySet = responseCode.entrySet()
            .stream()
            .map(e -> new SubscriptionAppResponse.SubscriptionAppPropertyDTO(e.getKey(), e.getValue()))
            .collect(Collectors.toSet());
        propertySet.addAll(newPropertySet);
        subscriptionApp.setProperties(propertySet);
        SubscriptionAppResponse subscriptionAppResponse = subscriptionAppClient.postApplicationProperties(subscriptionApp);

        return subscriptionAppResponse.toString();
    }

    public String refreshAccessToken() {

        ExpensifyService.ExpensifyParameters expensifyParameters = getExpensifyParameters();
        logger.info(expensifyParameters.toString());
        Map<String, Object> responseCode = expensifyClient.getAccessTokenByUsingRefreshToken(
            expensifyParameters.getClientId(),
            expensifyParameters.getRedirectUri(),
            expensifyParameters.getClientSecret(),
            Constants.EXPENSIFY_REFRESH_TOKEN, expensifyParameters.getRefreshToken());
        if (responseCode != null) {
            String accessToken = (String) responseCode.get("access_token");
            saveExpensifyProperties(responseCode);
            return accessToken;
        }
        return null;
    }


    public static class ExpensifyParameters {
        private String clientId;
        private String clientSecret;
        private String redirectUri;
        private String refreshToken;

        private String accessToken;

        private String  frontendRedirectUrl;
        private String companyId;

        public String getClientId() {
            return clientId;
        }

        public String getClientSecret() {
            return clientSecret;
        }

        public String getRedirectUri() {
            return redirectUri;
        }

        public void setClientId(String clientId) {
            this.clientId = clientId;
        }

        public void setClientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
        }

        public void setRedirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
        }

        public String getRefreshToken() {
            return refreshToken;
        }

        public void setRefreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
        }

        public String getAccessToken() {
            return accessToken;
        }

        public void setAccessToken(String accessToken) {
            this.accessToken = accessToken;
        }

        public String getCompanyId() {
            return companyId;
        }

        public void setCompanyId(String companyId) {
            this.companyId = companyId;
        }


        public String getFrontendRedirectUrl() {return frontendRedirectUrl; }

        public void setFrontendRedirectUrl(String frontendRedirectUrl) {this.frontendRedirectUrl = frontendRedirectUrl;}

        @Override
        public String toString() {
            return "ExpensifyParameters{" +
                "clientId='" + clientId + '\'' +
                ", clientSecret='" + clientSecret + '\'' +
                ", redirectUri='" + redirectUri + '\'' +
                ", refreshToken='" + refreshToken + '\'' +
                ", accessToken='" + accessToken + '\'' +
                ", companyId='" + companyId + '\'' +
                '}';
        }
    }
}
