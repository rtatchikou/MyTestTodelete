package com.lyncwork.services.hellosign.client.dropbox.config;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StreamUtils;

import java.io.IOException;
import java.util.List;


public class CustomConverter extends AbstractHttpMessageConverter<CustomInputStream> {

	private final Logger log = LoggerFactory.getLogger(CustomConverter.class);

	public CustomConverter() {
		super(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL);
	}

	@Override
	protected CustomInputStream readInternal(Class<? extends CustomInputStream> clazz, HttpInputMessage inputMessage)
			throws IOException, HttpMessageNotReadableException {
		HttpHeaders headers = inputMessage.getHeaders();
		log.info("headers : {}", headers);

		List<String> apiResults = headers.get("dropbox-api-result");
		String apiResult = CollectionUtils.isEmpty(apiResults) ? null : apiResults.get(0);

		CustomInputStream cis = new CustomInputStream();

		byte[] data = new byte[inputMessage.getBody().available()];
		inputMessage.getBody().read(data);
		cis.setData(data);

		if (apiResult == null) {
			return cis;
		}

		ObjectMapper mapper = new ObjectMapper();
		ObjectNode node = mapper.readValue(apiResult, ObjectNode.class);
		JsonNode fileName = node.get("name");
		if(fileName!=null) {
			String fileNameStr = fileName.asText();

			String[] fileInfo = fileNameStr.split("\\.");
			if (fileInfo.length != 2) {
				throw new DropboxConfigException("invalid file");
			}
			cis.setFileName(fileInfo[0]);
			cis.setExtension("." + fileInfo[1]);
		}

		JsonNode id = node.get("id");
		if(id != null) {
			cis.setFileId(id.asText());
		}

		JsonNode size = node.get("size");
		if(size != null) {
			cis.setSize(size.asLong());
		}

		return cis;
	}

	@Override
	protected void writeInternal(CustomInputStream t, HttpOutputMessage outputMessage)
			throws IOException, HttpMessageNotWritableException {
		StreamUtils.copy(t.getData(), outputMessage.getBody());
	}

	@Override
	protected boolean supports(Class<?> clazz) {
		return CustomInputStream.class == clazz;
	}
}
