package com.lyncwork.services.gusto.service.mapper;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lyncwork.services.gusto.client.gusto.payload.LyncWorkUser;
import com.lyncwork.services.gusto.domain.UserIntegrationMessage;
import com.lyncwork.services.gusto.service.dto.UserIntegrationMessageDTO;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Qualifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.CollectionUtils;

import java.io.IOException;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Mapper for the entity {@link UserIntegrationMessage} and its DTO {@link UserIntegrationMessageDTO}.
 */
@Mapper(componentModel = "spring")
public interface UserIntegrationMessageMapper extends EntityMapper<UserIntegrationMessageDTO, UserIntegrationMessage> {

    final Logger logger = LoggerFactory.getLogger(UserIntegrationMessageMapper.class);

    @Override
    @Mapping(source = "message", target = "message", qualifiedBy = MessageDTOToStringMapper.class)
    UserIntegrationMessage toEntity(UserIntegrationMessageDTO dto);

    @Override
    @Mapping(source = "message", target = "message", qualifiedBy = StringToMessageDTOMapper.class)
    UserIntegrationMessageDTO toDto(UserIntegrationMessage entity);


    @MessageDTOToStringMapper
    public static String messageDTOToString(UserIntegrationMessageDTO.MessageDTO message) {
        String result = null;
        try {
            JSONObject json = new JSONObject();
          LyncWorkUser lyncWorkUser=message.getLyncWorkUser();
            json.put("first_name", lyncWorkUser.getFirstName());
            json.put("last_name", lyncWorkUser.getLastName());
            json.put("email", lyncWorkUser.getEmailPrimary());
            result = json.toString();
        } catch (JSONException e) {
            logger.error(e.getMessage());
        }

        return result;
    }

    @StringToMessageDTOMapper
    public static UserIntegrationMessageDTO.MessageDTO stringToMessageDTO(String message) {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        UserIntegrationMessageDTO.MessageDTO result = null;

        try {
            result = mapper.readValue(message, UserIntegrationMessageDTO.MessageDTO.class);
        } catch (IOException e) {
            logger.error(e.getMessage());
        }

        return result;
    }


    @MessageDTOToStringMapper
    public static String lyncWorkUserToString(LyncWorkUser lyncWorkUser) {
        String result = null;
        try {
            JSONObject json = new JSONObject();
            json.put("first_name", lyncWorkUser.getFirstName());
            json.put("last_name", lyncWorkUser.getLastName());
            json.put("email", lyncWorkUser.getEmailPrimary());
            result = json.toString();
        } catch (JSONException e) {
            logger.error(e.getMessage());
        }

        return result;
    }
    @Qualifier
    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.CLASS)
    public @interface MessageDTOToStringMapper {
    }

    @Qualifier
    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.CLASS)
    public @interface StringToMessageDTOMapper {
    }

}
