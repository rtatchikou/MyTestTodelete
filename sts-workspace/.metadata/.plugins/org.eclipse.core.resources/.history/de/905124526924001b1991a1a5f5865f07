package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.ApplicationHelperText;
import com.lyncwork.services.store.service.dto.ApplicationHelperTextDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:47-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class ApplicationHelperTextMapperImpl implements ApplicationHelperTextMapper {

    @Autowired
    private ApplicationMapper applicationMapper;

    @Override
    public List<ApplicationHelperText> toEntity(List<ApplicationHelperTextDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<ApplicationHelperText> list = new ArrayList<ApplicationHelperText>( dtoList.size() );
        for ( ApplicationHelperTextDTO applicationHelperTextDTO : dtoList ) {
            list.add( toEntity( applicationHelperTextDTO ) );
        }

        return list;
    }

    @Override
    public List<ApplicationHelperTextDTO> toDto(List<ApplicationHelperText> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<ApplicationHelperTextDTO> list = new ArrayList<ApplicationHelperTextDTO>( entityList.size() );
        for ( ApplicationHelperText applicationHelperText : entityList ) {
            list.add( toDto( applicationHelperText ) );
        }

        return list;
    }

    @Override
    public ApplicationHelperTextDTO toDto(ApplicationHelperText applicationHelperText) {
        avoidBackReference( applicationHelperText );

        if ( applicationHelperText == null ) {
            return null;
        }

        ApplicationHelperTextDTO applicationHelperTextDTO = new ApplicationHelperTextDTO();

        applicationHelperTextDTO.setApplication( applicationMapper.toDto( applicationHelperText.getApplication() ) );
        applicationHelperTextDTO.setId( applicationHelperText.getId() );
        applicationHelperTextDTO.setTitle( applicationHelperText.getTitle() );
        applicationHelperTextDTO.setDescription( applicationHelperText.getDescription() );
        applicationHelperTextDTO.setStepNumber( applicationHelperText.getStepNumber() );
        applicationHelperTextDTO.setImage( applicationHelperText.getImage() );

        return applicationHelperTextDTO;
    }

    @Override
    public ApplicationHelperText toEntity(ApplicationHelperTextDTO applicationHelperTextDTO) {
        if ( applicationHelperTextDTO == null ) {
            return null;
        }

        ApplicationHelperText applicationHelperText = new ApplicationHelperText();

        applicationHelperText.setApplication( applicationMapper.toEntity( applicationHelperTextDTO.getApplication() ) );
        applicationHelperText.setId( applicationHelperTextDTO.getId() );
        applicationHelperText.setTitle( applicationHelperTextDTO.getTitle() );
        applicationHelperText.setDescription( applicationHelperTextDTO.getDescription() );
        applicationHelperText.setStepNumber( applicationHelperTextDTO.getStepNumber() );
        applicationHelperText.setImage( applicationHelperTextDTO.getImage() );

        return applicationHelperText;
    }
}
