package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.ApplicationProperty;
import com.lyncwork.services.store.service.dto.ApplicationPropertyDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:47-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class ApplicationPropertyMapperImpl implements ApplicationPropertyMapper {

    @Autowired
    private ApplicationMapper applicationMapper;

    @Override
    public List<ApplicationProperty> toEntity(List<ApplicationPropertyDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<ApplicationProperty> list = new ArrayList<ApplicationProperty>( dtoList.size() );
        for ( ApplicationPropertyDTO applicationPropertyDTO : dtoList ) {
            list.add( toEntity( applicationPropertyDTO ) );
        }

        return list;
    }

    @Override
    public List<ApplicationPropertyDTO> toDto(List<ApplicationProperty> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<ApplicationPropertyDTO> list = new ArrayList<ApplicationPropertyDTO>( entityList.size() );
        for ( ApplicationProperty applicationProperty : entityList ) {
            list.add( toDto( applicationProperty ) );
        }

        return list;
    }

    @Override
    public ApplicationPropertyDTO toDto(ApplicationProperty applicationProperty) {
        avoidBackReference( applicationProperty );

        if ( applicationProperty == null ) {
            return null;
        }

        ApplicationPropertyDTO applicationPropertyDTO = new ApplicationPropertyDTO();

        applicationPropertyDTO.setApplication( applicationMapper.toDto( applicationProperty.getApplication() ) );
        applicationPropertyDTO.setId( applicationProperty.getId() );
        applicationPropertyDTO.setName( applicationProperty.getName() );
        applicationPropertyDTO.setLabel( applicationProperty.getLabel() );
        applicationPropertyDTO.setDescription( applicationProperty.getDescription() );

        return applicationPropertyDTO;
    }

    @Override
    public ApplicationProperty toEntity(ApplicationPropertyDTO applicationPropertyDTO) {
        if ( applicationPropertyDTO == null ) {
            return null;
        }

        ApplicationProperty applicationProperty = new ApplicationProperty();

        applicationProperty.setApplication( applicationMapper.toEntity( applicationPropertyDTO.getApplication() ) );
        applicationProperty.setId( applicationPropertyDTO.getId() );
        applicationProperty.setName( applicationPropertyDTO.getName() );
        applicationProperty.setLabel( applicationPropertyDTO.getLabel() );
        applicationProperty.setDescription( applicationPropertyDTO.getDescription() );

        return applicationProperty;
    }
}
