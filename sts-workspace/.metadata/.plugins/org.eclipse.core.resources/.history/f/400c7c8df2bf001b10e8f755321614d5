package com.efunzo.be.training.contoller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.test.userroletest.entity.Role;
import com.test.userroletest.entity.User;
import com.test.userroletest.model.ErrorResponse;
import com.test.userroletest.model.UserResponse;
import com.test.userroletest.model.UserRoleTestResult;
import com.test.userroletest.service.UserRoleTestService;
import com.test.userroletest.utils.Utils;

@RestController
public class UserController {
	
	@Autowired
	private UserRoleTestService userRoleTestService;
	
	@GetMapping("/user/id")
	public ResponseEntity<UserRoleTestResult> findById(
	   @PathVariable(value = "id") Integer id) {
		
		UserRoleTestResult response = userRoleTestService.findById(id);
		
		if(response.getErrorResponse()!= null && response.getErrorResponse().getErrorMessage().equals(Utils.NOT_FOUND_MESSAGE)) {
			
			return ResponseEntity.status( HttpStatus.NOT_FOUND).body(response );
		}
		
	   return ResponseEntity.status( HttpStatus.OK).body(response );
	}
	
	
	@GetMapping("/user")
	public ResponseEntity<List<UserResponse>> findAll(
	   @PathVariable(value = "id") Integer id) {
		
		List<UserResponse> responses = userRoleTestService.findAll();
		
	   return ResponseEntity.status( HttpStatus.OK).body(responses );
	}

    @PostMapping(value = "/user")
    public ResponseEntity<UserRoleTestResult> insert(@RequestBody User user) {
    	
    	if(user.getFistName() == null || user.getFistName().isEmpty() ) {
    		
    		UserRoleTestResult response = new UserRoleTestResult(); 
    		
    		response.setErrorResponse(new ErrorResponse("First name is mandatory"));
    		
    		return ResponseEntity.status( HttpStatus.BAD_REQUEST).body(response );
    	}
        
    	List<Role> roles = user.getRoles();
    	
    	if(! CollectionUtils.isEmpty(roles) ) {
    	for (Role role : roles) {
    			
    			if(role.getName() == null || role.getName().isEmpty() ) {
    			UserRoleTestResult response = new UserRoleTestResult(); 
        		
        		response.setErrorResponse(new ErrorResponse("Name is mandatory"));
        		
        		return ResponseEntity.status( HttpStatus.BAD_REQUEST).body(response );
    			}
			}
			
		}
    	
    	return ResponseEntity.status( HttpStatus.OK).body(userRoleTestService.CreateOrUpdateUser(user));
        
    	
    }
    
    
    @PutMapping(value = "/user")
    public ResponseEntity<UserRoleTestResult> update(@RequestBody User user) {
    	
    	if(user.getFistName() == null || user.getFistName().isEmpty() ) {
    		
    		UserRoleTestResult response = new UserRoleTestResult(); 
    		
    		response.setErrorResponse(new ErrorResponse("First name is mandatory"));
    		
    		return ResponseEntity.status( HttpStatus.BAD_REQUEST).body(response );
    	}
        
    	List<Role> roles = user.getRoles();
    	
    	if(! CollectionUtils.isEmpty(roles) ) {
    	for (Role role : roles) {
    			
    			if(role.getName() == null || role.getName().isEmpty() ) {
    			UserRoleTestResult response = new UserRoleTestResult(); 
        		
        		response.setErrorResponse(new ErrorResponse("Name is mandatory"));
        		
        		return ResponseEntity.status( HttpStatus.BAD_REQUEST).body(response );
    			}
			}
			
		}
    	
    	return ResponseEntity.status(HttpStatus.ACCEPTED).body(new UserRoleTestResult());
        
    	
    }

  
    @DeleteMapping("/user/id")
	public ResponseEntity<UserRoleTestResult> delete(
	   @PathVariable(value = "id") Integer id) {
		
		userRoleTestService.removeUser(id);
		
	   return ResponseEntity.status( HttpStatus.ACCEPTED).body(new UserRoleTestResult() );
	}

  

}
