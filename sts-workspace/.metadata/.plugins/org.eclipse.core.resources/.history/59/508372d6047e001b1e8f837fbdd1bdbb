package com.lyncwork.services.hellosign.service.mapper;

import com.lyncwork.services.hellosign.domain.SignatureRequest;
import com.lyncwork.services.hellosign.service.dto.SignatureRequestDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2021-03-04T19:00:45-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class SignatureRequestMapperImpl implements SignatureRequestMapper {

    @Autowired
    private SignatureRequestInfoMapper signatureRequestInfoMapper;

    @Override
    public List<SignatureRequest> toEntity(List<SignatureRequestDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<SignatureRequest> list = new ArrayList<SignatureRequest>( dtoList.size() );
        for ( SignatureRequestDTO signatureRequestDTO : dtoList ) {
            list.add( toEntity( signatureRequestDTO ) );
        }

        return list;
    }

    @Override
    public List<SignatureRequestDTO> toDto(List<SignatureRequest> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<SignatureRequestDTO> list = new ArrayList<SignatureRequestDTO>( entityList.size() );
        for ( SignatureRequest signatureRequest : entityList ) {
            list.add( toDto( signatureRequest ) );
        }

        return list;
    }

    @Override
    public SignatureRequest toEntity(SignatureRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        SignatureRequest signatureRequest = new SignatureRequest();

        signatureRequest.setId( dto.getId() );
        signatureRequest.setEventType( dto.getEventType() );
        signatureRequest.setSignatureId( dto.getSignatureId() );
        signatureRequest.setSignUrl( dto.getSignUrl() );
        signatureRequest.setLyncWorkUserId( dto.getLyncWorkUserId() );
        signatureRequest.setRequesterLyncWorkUserId( dto.getRequesterLyncWorkUserId() );
        signatureRequest.setSignatureRequestInfo( signatureRequestInfoMapper.toEntity( dto.getSignatureRequestInfo() ) );
        signatureRequest.setMessage( dto.getMessage() );
        signatureRequest.setTitle( dto.getTitle() );
        signatureRequest.setSubject( dto.getSubject() );

        return signatureRequest;
    }

    @Override
    public SignatureRequestDTO toDto(SignatureRequest entity) {
        if ( entity == null ) {
            return null;
        }

        SignatureRequestDTO signatureRequestDTO = new SignatureRequestDTO();

        signatureRequestDTO.setId( entity.getId() );
        signatureRequestDTO.setEventType( entity.getEventType() );
        signatureRequestDTO.setSignatureId( entity.getSignatureId() );
        signatureRequestDTO.setSignUrl( entity.getSignUrl() );
        signatureRequestDTO.setLyncWorkUserId( entity.getLyncWorkUserId() );
        signatureRequestDTO.setRequesterLyncWorkUserId( entity.getRequesterLyncWorkUserId() );
        signatureRequestDTO.setSignatureRequestInfo( signatureRequestInfoMapper.toDto( entity.getSignatureRequestInfo() ) );
        signatureRequestDTO.setMessage( entity.getMessage() );
        signatureRequestDTO.setTitle( entity.getTitle() );
        signatureRequestDTO.setSubject( entity.getSubject() );

        return signatureRequestDTO;
    }
}
