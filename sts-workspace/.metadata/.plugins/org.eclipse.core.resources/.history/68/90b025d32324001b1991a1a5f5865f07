package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Address;
import com.lyncwork.services.store.domain.Company;
import com.lyncwork.services.store.domain.ImportantContact;
import com.lyncwork.services.store.service.dto.AddressDTO;
import com.lyncwork.services.store.service.dto.CompanyDTO;
import com.lyncwork.services.store.service.dto.ImportantContactDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-10T19:26:39-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class CompanyMapperImpl implements CompanyMapper {

    @Autowired
    private AddressMapper addressMapper;
    @Autowired
    private ImportantContactMapper importantContactMapper;

    @Override
    public List<Company> toEntity(List<CompanyDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<Company> list = new ArrayList<Company>( dtoList.size() );
        for ( CompanyDTO companyDTO : dtoList ) {
            list.add( toEntity( companyDTO ) );
        }

        return list;
    }

    @Override
    public List<CompanyDTO> toDto(List<Company> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<CompanyDTO> list = new ArrayList<CompanyDTO>( entityList.size() );
        for ( Company company : entityList ) {
            list.add( toDto( company ) );
        }

        return list;
    }

    @Override
    public CompanyDTO toDto(Company entity) {
        if ( entity == null ) {
            return null;
        }

        CompanyDTO companyDTO = new CompanyDTO();

        companyDTO.setImportantContacts( importantContactSetToImportantContactDTOSet( entity.getImportantContacts() ) );
        companyDTO.setAddresses( addressSetToAddressDTOSet( entity.getAddresses() ) );
        companyDTO.setId( entity.getId() );
        companyDTO.setCompanyName( entity.getCompanyName() );
        companyDTO.setCompanyLogo( entity.getCompanyLogo() );
        companyDTO.setCompanyDesc( entity.getCompanyDesc() );
        companyDTO.setPhonePrimary( entity.getPhonePrimary() );
        companyDTO.setPhoneSecondary1( entity.getPhoneSecondary1() );
        companyDTO.setPhoneSecondary2( entity.getPhoneSecondary2() );
        companyDTO.setCompanyStatus( entity.getCompanyStatus() );
        companyDTO.setWelcomeBlock( entity.getWelcomeBlock() );
        companyDTO.setTimelineBlock( entity.getTimelineBlock() );
        companyDTO.setCompanyInfoBlock( entity.getCompanyInfoBlock() );
        companyDTO.setOurCultureBlock( entity.getOurCultureBlock() );
        companyDTO.setLinksBlock( entity.getLinksBlock() );
        companyDTO.setDocumentationBlock( entity.getDocumentationBlock() );
        companyDTO.setTermsLink( entity.getTermsLink() );
        companyDTO.setPrivacyLink( entity.getPrivacyLink() );
        companyDTO.setEmploymentAgreementLink( entity.getEmploymentAgreementLink() );
        companyDTO.setDomain( entity.getDomain() );

        return companyDTO;
    }

    @Override
    public Company toEntity(CompanyDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Company company = new Company();

        company.setImportantContacts( importantContactDTOSetToImportantContactSet( dto.getImportantContacts() ) );
        company.setAddresses( addressDTOSetToAddressSet( dto.getAddresses() ) );
        company.setId( dto.getId() );
        company.setCompanyName( dto.getCompanyName() );
        company.setCompanyLogo( dto.getCompanyLogo() );
        company.setCompanyDesc( dto.getCompanyDesc() );
        company.setPhonePrimary( dto.getPhonePrimary() );
        company.setPhoneSecondary1( dto.getPhoneSecondary1() );
        company.setPhoneSecondary2( dto.getPhoneSecondary2() );
        company.setCompanyStatus( dto.getCompanyStatus() );
        company.setWelcomeBlock( dto.getWelcomeBlock() );
        company.setTimelineBlock( dto.getTimelineBlock() );
        company.setCompanyInfoBlock( dto.getCompanyInfoBlock() );
        company.setOurCultureBlock( dto.getOurCultureBlock() );
        company.setLinksBlock( dto.getLinksBlock() );
        company.setDocumentationBlock( dto.getDocumentationBlock() );
        company.setTermsLink( dto.getTermsLink() );
        company.setPrivacyLink( dto.getPrivacyLink() );
        company.setEmploymentAgreementLink( dto.getEmploymentAgreementLink() );
        company.domain( dto.getDomain() );

        return company;
    }

    protected Set<ImportantContactDTO> importantContactSetToImportantContactDTOSet(Set<ImportantContact> set) {
        if ( set == null ) {
            return null;
        }

        Set<ImportantContactDTO> set1 = new HashSet<ImportantContactDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ImportantContact importantContact : set ) {
            set1.add( importantContactMapper.toDto( importantContact ) );
        }

        return set1;
    }

    protected Set<AddressDTO> addressSetToAddressDTOSet(Set<Address> set) {
        if ( set == null ) {
            return null;
        }

        Set<AddressDTO> set1 = new HashSet<AddressDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Address address : set ) {
            set1.add( addressMapper.toDto( address ) );
        }

        return set1;
    }

    protected Set<ImportantContact> importantContactDTOSetToImportantContactSet(Set<ImportantContactDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<ImportantContact> set1 = new HashSet<ImportantContact>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ImportantContactDTO importantContactDTO : set ) {
            set1.add( importantContactMapper.toEntity( importantContactDTO ) );
        }

        return set1;
    }

    protected Set<Address> addressDTOSetToAddressSet(Set<AddressDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Address> set1 = new HashSet<Address>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( AddressDTO addressDTO : set ) {
            set1.add( addressMapper.toEntity( addressDTO ) );
        }

        return set1;
    }
}
