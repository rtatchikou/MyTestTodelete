package com.lyncwork.services.dropbox.client.dropbox.utils;

import com.opencsv.CSVWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class FileUtils {
    private static final Logger logger= LoggerFactory.getLogger(FileUtils.class);

    public static Path creatCsvTempFile(){
        Path path = null;
        try {
            path = Files.createTempFile(UUID.randomUUID().toString()+"employeeData", ".csv");

        } catch (IOException e)
        {
            logger.error("Error while creating csv file: " + e.toString());
            e.printStackTrace();
        }

        return path;
    }

    public static File createEmployeeDataCsv(String filePath, String employeeEmail, String managerEmail, Boolean isAdmin )
    {
        File file = new File(filePath);
        try {

            FileWriter outputfile = new FileWriter(file);
            CSVWriter writer = new CSVWriter(outputfile);

            String[] header = { "EmployeeEmail","ManagerEmail","Admin" };
            writer.writeNext(header);

            String[] data1 = { employeeEmail, managerEmail, isAdmin.toString() };
            writer.writeNext(data1);

            writer.close();
        }
        catch (IOException e) {
            logger.error("Error while creating csv file: " + e.toString());
            e.printStackTrace();
        }

        return file;
    }

    public static void printContent(File file) {
        try(BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while((line = br.readLine()) != null) {
                logger.info("{}", line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void print(List<String[]> datas ) {
        if(datas == null) {
            logger.info("no data to be printed");
        } else {
            datas.stream().forEach(data -> {
                logger.info("{}", Arrays.toString(data));
            });
        }

    }

    public static File createCSVTempFile(List<String[]> lines, String fileName) {
        File file = createTempFile(fileName);
        try(PrintWriter writer = new PrintWriter(file)) {
            lines.stream().map(line -> convertToCSV(line)).forEach(writer::println);;
            return file;
        } catch (FileNotFoundException e) {
            logger.error(e.getMessage());
            return null;
        }
    }

    private static String convertToCSV(String[] data) {
        return Stream.of(data)
                .map(dataItem -> escapeSpecialCharacters(dataItem))
                .collect(Collectors.joining(","));
    }

    private static String escapeSpecialCharacters(String data) {
        String escapedData = data.replaceAll("\\R", " ");
        if (data.contains(",") || data.contains("\"") || data.contains("'")) {
            data = data.replace("\"", "\"\"");
            escapedData = "\"" + data + "\"";
        }
        return escapedData;
    }

    private static File createTempFile(String fileName)  {
        try {
            return File.createTempFile(fileName, ".csv");
        } catch (IOException e) {
            logger.error(e.getMessage());
            return null;
        }
    }


}
