package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Application;
import com.lyncwork.services.store.domain.ApplicationCapability;
import com.lyncwork.services.store.domain.ApplicationCategory;
import com.lyncwork.services.store.domain.ApplicationProperty;
import com.lyncwork.services.store.domain.Role;
import com.lyncwork.services.store.domain.RolePermission;
import com.lyncwork.services.store.service.dto.ApplicationCapabilityDTO;
import com.lyncwork.services.store.service.dto.ApplicationCategoryDTO;
import com.lyncwork.services.store.service.dto.ApplicationDTO;
import com.lyncwork.services.store.service.dto.ApplicationPropertyDTO;
import com.lyncwork.services.store.service.dto.RoleDTO;
import com.lyncwork.services.store.service.dto.RolePermissionDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-10T19:26:39-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class RolePermissionMapperImpl implements RolePermissionMapper {

    @Override
    public List<RolePermission> toEntity(List<RolePermissionDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<RolePermission> list = new ArrayList<RolePermission>( dtoList.size() );
        for ( RolePermissionDTO rolePermissionDTO : dtoList ) {
            list.add( toEntity( rolePermissionDTO ) );
        }

        return list;
    }

    @Override
    public List<RolePermissionDTO> toDto(List<RolePermission> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<RolePermissionDTO> list = new ArrayList<RolePermissionDTO>( entityList.size() );
        for ( RolePermission rolePermission : entityList ) {
            list.add( toDto( rolePermission ) );
        }

        return list;
    }

    @Override
    public RolePermission toEntity(RolePermissionDTO dto) {
        if ( dto == null ) {
            return null;
        }

        RolePermission rolePermission = new RolePermission();

        rolePermission.setRole( roleDTOToRole( dto.getRole() ) );
        rolePermission.setId( dto.getId() );
        rolePermission.setTeams( dto.isTeams() );
        rolePermission.setRoles( dto.isRoles() );
        rolePermission.setUsers( dto.isUsers() );
        rolePermission.setTasks( dto.isTasks() );
        rolePermission.setWorkflows( dto.isWorkflows() );
        rolePermission.setApplications( dto.isApplications() );

        return rolePermission;
    }

    @Override
    public RolePermissionDTO toDto(RolePermission entity) {
        avoidBackreference( entity );

        if ( entity == null ) {
            return null;
        }

        RolePermissionDTO rolePermissionDTO = new RolePermissionDTO();

        rolePermissionDTO.setRole( roleToRoleDTO( entity.getRole() ) );
        rolePermissionDTO.setId( entity.getId() );
        rolePermissionDTO.setTeams( entity.isTeams() );
        rolePermissionDTO.setUsers( entity.isUsers() );
        rolePermissionDTO.setApplications( entity.isApplications() );
        rolePermissionDTO.setTasks( entity.isTasks() );
        rolePermissionDTO.setRoles( entity.isRoles() );
        rolePermissionDTO.setWorkflows( entity.isWorkflows() );

        return rolePermissionDTO;
    }

    protected ApplicationProperty applicationPropertyDTOToApplicationProperty(ApplicationPropertyDTO applicationPropertyDTO) {
        if ( applicationPropertyDTO == null ) {
            return null;
        }

        ApplicationProperty applicationProperty = new ApplicationProperty();

        applicationProperty.setId( applicationPropertyDTO.getId() );
        applicationProperty.setName( applicationPropertyDTO.getName() );
        applicationProperty.setLabel( applicationPropertyDTO.getLabel() );
        applicationProperty.setDescription( applicationPropertyDTO.getDescription() );
        applicationProperty.setApplication( applicationDTOToApplication( applicationPropertyDTO.getApplication() ) );

        return applicationProperty;
    }

    protected Set<ApplicationProperty> applicationPropertyDTOSetToApplicationPropertySet(Set<ApplicationPropertyDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<ApplicationProperty> set1 = new HashSet<ApplicationProperty>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationPropertyDTO applicationPropertyDTO : set ) {
            set1.add( applicationPropertyDTOToApplicationProperty( applicationPropertyDTO ) );
        }

        return set1;
    }

    protected Set<Application> applicationDTOSetToApplicationSet(Set<ApplicationDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Application> set1 = new HashSet<Application>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationDTO applicationDTO : set ) {
            set1.add( applicationDTOToApplication( applicationDTO ) );
        }

        return set1;
    }

    protected ApplicationCategory applicationCategoryDTOToApplicationCategory(ApplicationCategoryDTO applicationCategoryDTO) {
        if ( applicationCategoryDTO == null ) {
            return null;
        }

        ApplicationCategory applicationCategory = new ApplicationCategory();

        applicationCategory.setId( applicationCategoryDTO.getId() );
        applicationCategory.setApplications( applicationDTOSetToApplicationSet( applicationCategoryDTO.getApplications() ) );
        applicationCategory.setName( applicationCategoryDTO.getName() );

        return applicationCategory;
    }

    protected Set<ApplicationCategory> applicationCategoryDTOSetToApplicationCategorySet(Set<ApplicationCategoryDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<ApplicationCategory> set1 = new HashSet<ApplicationCategory>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationCategoryDTO applicationCategoryDTO : set ) {
            set1.add( applicationCategoryDTOToApplicationCategory( applicationCategoryDTO ) );
        }

        return set1;
    }

    protected Set<ApplicationCapability> applicationCapabilityDTOSetToApplicationCapabilitySet(Set<ApplicationCapabilityDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<ApplicationCapability> set1 = new HashSet<ApplicationCapability>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationCapabilityDTO applicationCapabilityDTO : set ) {
            set1.add( applicationCapabilityDTOToApplicationCapability( applicationCapabilityDTO ) );
        }

        return set1;
    }

    protected Application applicationDTOToApplication(ApplicationDTO applicationDTO) {
        if ( applicationDTO == null ) {
            return null;
        }

        Application application = new Application();

        application.setId( applicationDTO.getId() );
        application.setAppName( applicationDTO.getAppName() );
        application.setAppDesc( applicationDTO.getAppDesc() );
        application.setAppVersion( applicationDTO.getAppVersion() );
        application.setAppLink( applicationDTO.getAppLink() );
        application.setAppClipart( applicationDTO.getAppClipart() );
        application.setApplicationProperties( applicationPropertyDTOSetToApplicationPropertySet( applicationDTO.getApplicationProperties() ) );
        application.setCategories( applicationCategoryDTOSetToApplicationCategorySet( applicationDTO.getCategories() ) );
        application.setAppStatus( applicationDTO.getAppStatus() );
        application.setAppExpirationDate( applicationDTO.getAppExpirationDate() );
        application.setApplicationCapabilities( applicationCapabilityDTOSetToApplicationCapabilitySet( applicationDTO.getApplicationCapabilities() ) );
        application.setMultiCapabilitiesAllowed( applicationDTO.getMultiCapabilitiesAllowed() );
        application.appType( applicationDTO.getAppType() );

        return application;
    }

    protected Set<Role> roleDTOSetToRoleSet(Set<RoleDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<Role> set1 = new HashSet<Role>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( RoleDTO roleDTO : set ) {
            set1.add( roleDTOToRole( roleDTO ) );
        }

        return set1;
    }

    protected ApplicationCapability applicationCapabilityDTOToApplicationCapability(ApplicationCapabilityDTO applicationCapabilityDTO) {
        if ( applicationCapabilityDTO == null ) {
            return null;
        }

        ApplicationCapability applicationCapability = new ApplicationCapability();

        applicationCapability.setId( applicationCapabilityDTO.getId() );
        applicationCapability.setValue( applicationCapabilityDTO.getValue() );
        applicationCapability.setCapability( applicationCapabilityDTO.getCapability() );
        applicationCapability.setApplication( applicationDTOToApplication( applicationCapabilityDTO.getApplication() ) );
        applicationCapability.setRoles( roleDTOSetToRoleSet( applicationCapabilityDTO.getRoles() ) );

        return applicationCapability;
    }

    protected Role roleDTOToRole(RoleDTO roleDTO) {
        if ( roleDTO == null ) {
            return null;
        }

        Role role = new Role();

        role.setId( roleDTO.getId() );
        role.setRoleName( roleDTO.getRoleName() );
        role.setRoleType( roleDTO.getRoleType() );
        role.applicationCapabilities( applicationCapabilityDTOSetToApplicationCapabilitySet( roleDTO.getApplicationCapabilities() ) );
        role.setPermissions( toEntity( roleDTO.getPermissions() ) );

        return role;
    }

    protected ApplicationPropertyDTO applicationPropertyToApplicationPropertyDTO(ApplicationProperty applicationProperty) {
        if ( applicationProperty == null ) {
            return null;
        }

        ApplicationPropertyDTO applicationPropertyDTO = new ApplicationPropertyDTO();

        applicationPropertyDTO.setId( applicationProperty.getId() );
        applicationPropertyDTO.setName( applicationProperty.getName() );
        applicationPropertyDTO.setLabel( applicationProperty.getLabel() );
        applicationPropertyDTO.setDescription( applicationProperty.getDescription() );
        applicationPropertyDTO.setApplication( applicationToApplicationDTO( applicationProperty.getApplication() ) );

        return applicationPropertyDTO;
    }

    protected Set<ApplicationPropertyDTO> applicationPropertySetToApplicationPropertyDTOSet(Set<ApplicationProperty> set) {
        if ( set == null ) {
            return null;
        }

        Set<ApplicationPropertyDTO> set1 = new HashSet<ApplicationPropertyDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationProperty applicationProperty : set ) {
            set1.add( applicationPropertyToApplicationPropertyDTO( applicationProperty ) );
        }

        return set1;
    }

    protected Set<ApplicationCapabilityDTO> applicationCapabilitySetToApplicationCapabilityDTOSet(Set<ApplicationCapability> set) {
        if ( set == null ) {
            return null;
        }

        Set<ApplicationCapabilityDTO> set1 = new HashSet<ApplicationCapabilityDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationCapability applicationCapability : set ) {
            set1.add( applicationCapabilityToApplicationCapabilityDTO( applicationCapability ) );
        }

        return set1;
    }

    protected Set<ApplicationDTO> applicationSetToApplicationDTOSet(Set<Application> set) {
        if ( set == null ) {
            return null;
        }

        Set<ApplicationDTO> set1 = new HashSet<ApplicationDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Application application : set ) {
            set1.add( applicationToApplicationDTO( application ) );
        }

        return set1;
    }

    protected ApplicationCategoryDTO applicationCategoryToApplicationCategoryDTO(ApplicationCategory applicationCategory) {
        if ( applicationCategory == null ) {
            return null;
        }

        ApplicationCategoryDTO applicationCategoryDTO = new ApplicationCategoryDTO();

        applicationCategoryDTO.setId( applicationCategory.getId() );
        applicationCategoryDTO.setApplications( applicationSetToApplicationDTOSet( applicationCategory.getApplications() ) );
        applicationCategoryDTO.setName( applicationCategory.getName() );

        return applicationCategoryDTO;
    }

    protected Set<ApplicationCategoryDTO> applicationCategorySetToApplicationCategoryDTOSet(Set<ApplicationCategory> set) {
        if ( set == null ) {
            return null;
        }

        Set<ApplicationCategoryDTO> set1 = new HashSet<ApplicationCategoryDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( ApplicationCategory applicationCategory : set ) {
            set1.add( applicationCategoryToApplicationCategoryDTO( applicationCategory ) );
        }

        return set1;
    }

    protected ApplicationDTO applicationToApplicationDTO(Application application) {
        if ( application == null ) {
            return null;
        }

        ApplicationDTO applicationDTO = new ApplicationDTO();

        applicationDTO.setId( application.getId() );
        applicationDTO.setApplicationProperties( applicationPropertySetToApplicationPropertyDTOSet( application.getApplicationProperties() ) );
        applicationDTO.setApplicationCapabilities( applicationCapabilitySetToApplicationCapabilityDTOSet( application.getApplicationCapabilities() ) );
        applicationDTO.setAppName( application.getAppName() );
        applicationDTO.setAppDesc( application.getAppDesc() );
        applicationDTO.setCategories( applicationCategorySetToApplicationCategoryDTOSet( application.getCategories() ) );
        applicationDTO.setAppVersion( application.getAppVersion() );
        applicationDTO.setAppLink( application.getAppLink() );
        applicationDTO.setAppClipart( application.getAppClipart() );
        applicationDTO.setAppStatus( application.getAppStatus() );
        applicationDTO.setAppExpirationDate( application.getAppExpirationDate() );
        applicationDTO.setMultiCapabilitiesAllowed( application.getMultiCapabilitiesAllowed() );
        applicationDTO.setAppType( application.getAppType() );

        return applicationDTO;
    }

    protected Set<RoleDTO> roleSetToRoleDTOSet(Set<Role> set) {
        if ( set == null ) {
            return null;
        }

        Set<RoleDTO> set1 = new HashSet<RoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( Role role : set ) {
            set1.add( roleToRoleDTO( role ) );
        }

        return set1;
    }

    protected ApplicationCapabilityDTO applicationCapabilityToApplicationCapabilityDTO(ApplicationCapability applicationCapability) {
        if ( applicationCapability == null ) {
            return null;
        }

        ApplicationCapabilityDTO applicationCapabilityDTO = new ApplicationCapabilityDTO();

        applicationCapabilityDTO.setApplication( applicationToApplicationDTO( applicationCapability.getApplication() ) );
        applicationCapabilityDTO.setId( applicationCapability.getId() );
        applicationCapabilityDTO.setCapability( applicationCapability.getCapability() );
        applicationCapabilityDTO.setRoles( roleSetToRoleDTOSet( applicationCapability.getRoles() ) );
        applicationCapabilityDTO.setValue( applicationCapability.getValue() );

        return applicationCapabilityDTO;
    }

    protected RoleDTO roleToRoleDTO(Role role) {
        if ( role == null ) {
            return null;
        }

        RoleDTO roleDTO = new RoleDTO();

        roleDTO.setApplicationCapabilities( applicationCapabilitySetToApplicationCapabilityDTOSet( role.getApplicationCapabilities() ) );
        roleDTO.setId( role.getId() );
        roleDTO.setRoleName( role.getRoleName() );
        roleDTO.setRoleType( role.getRoleType() );
        roleDTO.setPermissions( toDto( role.getPermissions() ) );

        return roleDTO;
    }
}
