#!groovy
def notifySlack(String buildStatus = 'STARTED') {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: Job : `${env.JOB_NAME}` #${env.BUILD_NUMBER} in ${params.environment} environment for namespace ${params.nameSpace} \nMore info at: ${env.BUILD_URL}"

    slackSend(color: color, message: msg)
}
properties([
        parameters([
                choice(name: 'nameSpace', choices: "default\ndevelopment", description: 'NameSpace for kubernetes'),
                choice(name: 'environment', choices: "prod\ndev", description: 'Maven Build for environment'),
        ])
])
podTemplate(label: 'builder', containers: [
        containerTemplate(name: 'builder', image: 'jhipster/jhipster:v6.4.1', ttyEnabled: true, command: 'cat')
],
        volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
        ]) {

    node{
        try {
            notifySlack()
        stage('SCM') {
            checkout scm
        }
            stage('Build dropbox') {
                stage('check java') {
                    sh "java -version"
                }
                
                    stage('clean') {
                        sh "chmod +x mvnw"
                        sh "./mvnw -ntp clean"
                    }

                    stage('nohttp') {
                        sh "./mvnw -ntp checkstyle:check"
                    }


                    stage('packaging') {
                        sh """./mvnw -ntp verify -P${params.environment} -DskipTests"""
                        archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    }
                
            }

            stage('build docker') {
                    sh """./build.docker.sh ${params.environment}"""
                
            }

            stage('push docker')
                    {
                        
                            docker.withRegistry('https://387856044462.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-credentials'){
                                sh """./docker.push.sh ${params.environment}"""
                            }
                        
                    }

            stage('kubernetes deployment') {
                def namespace = """${params.nameSpace}"""
                def dirpath = """kubernetes/aws-${params.nameSpace}"""
                dir(dirpath) {
                    withKubeConfig([credentialsId: 'Kubernetes Secret', serverUrl: 'https://24DED2E381E0E429A576E52216B8E6D8.gr7.us-east-1.eks.amazonaws.com']) {
                        sh './kubectl-apply.sh'
                        sh """kubectl -n ${namespace} rollout restart deployment dropbox"""
                    }
                }
            }
        }
        catch (e) {
            currentBuild.result = 'FAILURE'
            throw e
        } finally {
            notifySlack(currentBuild.result)
        }
    }
}
