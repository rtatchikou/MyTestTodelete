package com.lyncwork.services.expensify.client.expensify.config;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lyncwork.services.expensify.client.expensify.decoder.GustoErrorDecoder;
import com.lyncwork.services.expensify.client.expensify.interceptor.GustoClientInterceptor;
import com.lyncwork.services.expensify.client.expensify.service.GustoService;
import com.lyncwork.services.expensify.client.store.Response.SubscriptionAppResponse;
import com.lyncwork.services.expensify.client.store.client.SubscriptionAppClient;
import com.lyncwork.services.expensify.processors.Constants;

import feign.codec.Decoder;
import feign.codec.ErrorDecoder;
import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.cloud.openfeign.support.ResponseEntityDecoder;
import org.springframework.cloud.openfeign.support.SpringDecoder;
import org.springframework.context.annotation.Bean;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;

import java.util.Set;

public class ExpensifyConfig {
    @Autowired
    SubscriptionAppClient subscriptionAppClient;


    @Bean
    public ExpensifyClientInterceptor expensifyClientInterceptor (){
    	ExpensifyClientInterceptor expensifyClientInterceptor =new ExpensifyClientInterceptor();
        String accessToken=getExpensifyParameters().getAccessToken();
        expensifyClientInterceptor.setAccessToken(accessToken);
        return expensifyClientInterceptor;
    }
    @Bean
    public ErrorDecoder errorDecoder() {
        return new GustoErrorDecoder();
    }

    private  GustoService.GustoParameters getGustoParameters() {
        SubscriptionAppResponse subscriptionAppResponse = subscriptionAppClient.getApplicationProperties(Constants.APPLICATION_NAME);
        GustoService.GustoParameters gustoParameters = new GustoService.GustoParameters();

        if (subscriptionAppResponse != null) {
            Set<SubscriptionAppResponse.SubscriptionAppPropertyDTO> properties = subscriptionAppResponse.getProperties();
            if (properties != null && !properties.isEmpty()) {
                properties.stream().forEach(p -> {
                    switch (p.getKey().toLowerCase()) {
                        case Constants.GUSTO_REDIRECT_URI:
                            gustoParameters.setRedirectUri((String) p.getValue());
                            break;
                        case Constants.GUSTO_CLIENT_ID:
                            gustoParameters.setClientId((String) p.getValue());
                            break;
                        case Constants.GUSTO_CLIENT_SECRET:
                            gustoParameters.setClientSecret((String) p.getValue());
                            break;
                        case Constants.GUSTO_REFRESH_TOKEN:
                            gustoParameters.setRefreshToken((String) p.getValue());
                            break;
                        case Constants.GUSTO_ACCESS_TOKEN:
                            gustoParameters.setAccessToken((String) p.getValue());
                            break;
                        default:
                            break;
                    }
                });

            }
        }

        return gustoParameters;
    }

    @Bean
    public Decoder feignDecoder() {
        HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter(customObjectMapper());
        ObjectFactory<HttpMessageConverters> objectFactory = () -> new HttpMessageConverters(jacksonConverter);
        return new ResponseEntityDecoder(new SpringDecoder(objectFactory));
    }

    public ObjectMapper customObjectMapper(){
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        //Customize as much as you want
        return objectMapper;
    }
}
