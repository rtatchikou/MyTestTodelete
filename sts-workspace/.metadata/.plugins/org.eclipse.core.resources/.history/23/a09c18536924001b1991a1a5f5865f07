package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.WorkflowTaskProperty;
import com.lyncwork.services.store.service.dto.WorkflowTaskPropertyDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:47-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class WorkflowTaskPropertyMapperImpl implements WorkflowTaskPropertyMapper {

    @Autowired
    private WorkflowTaskMapper workflowTaskMapper;

    @Override
    public List<WorkflowTaskProperty> toEntity(List<WorkflowTaskPropertyDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<WorkflowTaskProperty> list = new ArrayList<WorkflowTaskProperty>( dtoList.size() );
        for ( WorkflowTaskPropertyDTO workflowTaskPropertyDTO : dtoList ) {
            list.add( toEntity( workflowTaskPropertyDTO ) );
        }

        return list;
    }

    @Override
    public List<WorkflowTaskPropertyDTO> toDto(List<WorkflowTaskProperty> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<WorkflowTaskPropertyDTO> list = new ArrayList<WorkflowTaskPropertyDTO>( entityList.size() );
        for ( WorkflowTaskProperty workflowTaskProperty : entityList ) {
            list.add( toDto( workflowTaskProperty ) );
        }

        return list;
    }

    @Override
    public WorkflowTaskProperty toEntity(WorkflowTaskPropertyDTO dto) {
        if ( dto == null ) {
            return null;
        }

        WorkflowTaskProperty workflowTaskProperty = new WorkflowTaskProperty();

        workflowTaskProperty.setValue( dto.getValue() );
        workflowTaskProperty.setKey( dto.getKey() );
        workflowTaskProperty.setWorkflowTask( workflowTaskMapper.toEntity( dto.getWorkflowTask() ) );
        workflowTaskProperty.setId( dto.getId() );

        return workflowTaskProperty;
    }

    @Override
    public WorkflowTaskPropertyDTO toDto(WorkflowTaskProperty entity) {
        avoidBackreferences( entity );

        if ( entity == null ) {
            return null;
        }

        WorkflowTaskPropertyDTO workflowTaskPropertyDTO = new WorkflowTaskPropertyDTO();

        workflowTaskPropertyDTO.setValue( entity.getValue() );
        workflowTaskPropertyDTO.setKey( entity.getKey() );
        workflowTaskPropertyDTO.setWorkflowTask( workflowTaskMapper.toDto( entity.getWorkflowTask() ) );
        workflowTaskPropertyDTO.setId( entity.getId() );

        return workflowTaskPropertyDTO;
    }
}
