package com.lyncwork.services.store.service.mapper;

import com.lyncwork.services.store.domain.Address;
import com.lyncwork.services.store.service.dto.AddressDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2020-11-09T21:52:47-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class AddressMapperImpl implements AddressMapper {

    @Override
    public Address toEntity(AddressDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Address address = new Address();

        address.setId( dto.getId() );
        address.setAddressType( dto.getAddressType() );
        address.setSysCreationDate( dto.getSysCreationDate() );
        address.setSysUpdateDate( dto.getSysUpdateDate() );
        address.setLastUpdatedBy( dto.getLastUpdatedBy() );
        address.setLineOne( dto.getLineOne() );
        address.setLineTwo( dto.getLineTwo() );
        address.setAptNum( dto.getAptNum() );
        address.setCity( dto.getCity() );
        address.setState( dto.getState() );
        address.setPostalCode( dto.getPostalCode() );
        address.setCountry( dto.getCountry() );
        address.setExpirationDate( dto.getExpirationDate() );

        return address;
    }

    @Override
    public AddressDTO toDto(Address entity) {
        if ( entity == null ) {
            return null;
        }

        AddressDTO addressDTO = new AddressDTO();

        addressDTO.setId( entity.getId() );
        addressDTO.setAddressType( entity.getAddressType() );
        addressDTO.setSysCreationDate( entity.getSysCreationDate() );
        addressDTO.setSysUpdateDate( entity.getSysUpdateDate() );
        addressDTO.setLastUpdatedBy( entity.getLastUpdatedBy() );
        addressDTO.setLineOne( entity.getLineOne() );
        addressDTO.setLineTwo( entity.getLineTwo() );
        addressDTO.setAptNum( entity.getAptNum() );
        addressDTO.setCity( entity.getCity() );
        addressDTO.setState( entity.getState() );
        addressDTO.setPostalCode( entity.getPostalCode() );
        addressDTO.setCountry( entity.getCountry() );
        addressDTO.setExpirationDate( entity.getExpirationDate() );

        return addressDTO;
    }

    @Override
    public List<Address> toEntity(List<AddressDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<Address> list = new ArrayList<Address>( dtoList.size() );
        for ( AddressDTO addressDTO : dtoList ) {
            list.add( toEntity( addressDTO ) );
        }

        return list;
    }

    @Override
    public List<AddressDTO> toDto(List<Address> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<AddressDTO> list = new ArrayList<AddressDTO>( entityList.size() );
        for ( Address address : entityList ) {
            list.add( toDto( address ) );
        }

        return list;
    }
}
