<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>AuthTokenServiceImpl.java</title><link rel="stylesheet" href="../jacoco-resources/prettify.css" type="text/css"/><script type="text/javascript" src="../jacoco-resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Dropbox</a> &gt; <a href="index.source.html" class="el_package">com.lyncwork.services.dropbox.client.dropbox.service.impl</a> &gt; <span class="el_source">AuthTokenServiceImpl.java</span></div><h1>AuthTokenServiceImpl.java</h1><pre class="source lang-java linenums">package com.lyncwork.services.dropbox.client.dropbox.service.impl;


import com.lyncwork.services.dropbox.client.dropbox.client.auth.AuthClient;
import com.lyncwork.services.dropbox.client.dropbox.domaine.Auth;
import com.lyncwork.services.dropbox.client.dropbox.model.response.AuthTokenResponse;
import com.lyncwork.services.dropbox.client.dropbox.repository.AuthRepository;
import com.lyncwork.services.dropbox.client.dropbox.service.AuthService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Component
@Transactional
<span class="nc" id="L23">public class AuthTokenServiceImpl implements AuthService {</span>
<span class="nc" id="L24">    private static final Logger logger = LoggerFactory.getLogger(AuthTokenServiceImpl.class);</span>

    @Autowired
    private AuthClient authClient;

    @Autowired
    private AuthRepository authRepository;

    @Value(&quot;${dropbox.app_key}&quot;)
    private String clientId;

    @Value(&quot;${dropbox.access_code}&quot;)
    private String code;

    @Override
    public Auth getNewToken(String code) {
<span class="nc" id="L40">        logger.info(&quot;Going to get new token for client id {}&quot;, clientId);</span>
<span class="nc" id="L41">        Map&lt;String, String&gt; request = new HashMap&lt;&gt;();</span>
<span class="nc" id="L42">        request.put(&quot;code&quot;, code);</span>
<span class="nc" id="L43">        request.put(&quot;grant_type&quot;, &quot;authorization_code&quot;);</span>

<span class="nc" id="L45">        AuthTokenResponse response = authClient.getAccessToken(request);</span>
<span class="nc bnc" id="L46" title="All 2 branches missed.">        if(response != null) {</span>
<span class="nc" id="L47">            return storeToken(response);</span>
        }
<span class="nc" id="L49">        logger.warn(&quot;Token is not created!&quot;);</span>
<span class="nc" id="L50">        return null;</span>
    }

    @Transactional(readOnly=false)
    @Override
    public String getToken() {
<span class="nc" id="L56">        logger.info(&quot;line54  $$$$$$$$$$$$$$$$$$$&quot;);</span>

<span class="nc" id="L58">        Optional&lt;Auth&gt; optionalAuth = authRepository.findByClientId(clientId);</span>

<span class="nc" id="L60">        logger.info(&quot;line58  $$$$$$$$$$$$$$$$$$$&quot;);</span>
<span class="nc" id="L61">        Auth auth = null;</span>
<span class="nc bnc" id="L62" title="All 2 branches missed.">        if(optionalAuth.isPresent()) {</span>
<span class="nc" id="L63">            auth = optionalAuth.get();</span>
        } else {
<span class="nc" id="L65">            auth = getNewToken(code);</span>
        }

<span class="nc bnc" id="L68" title="All 2 branches missed.">        if(!auth.validToken()) {</span>
<span class="nc" id="L69">            logger.warn(&quot;Token is expired, going to refresh new one!&quot;);</span>
<span class="nc" id="L70">            auth = refreshToken(auth);</span>
        }
<span class="nc" id="L72">        logger.info(&quot;line 69 access token:: {}&quot;, auth.getAccessToken());</span>
<span class="nc" id="L73">        return auth.getAccessToken();</span>
    }

    private Auth refreshToken(Auth auth) {
<span class="nc" id="L77">        Map&lt;String, String&gt; request = new HashMap&lt;&gt;();</span>
<span class="nc" id="L78">        request.put(&quot;refresh_token&quot;, auth.getRefreshToken());</span>
<span class="nc" id="L79">        request.put(&quot;grant_type&quot;, &quot;refresh_token&quot;);</span>

<span class="nc" id="L81">        AuthTokenResponse response = authClient.refreshToken(request);</span>
<span class="nc" id="L82">        logger.info(&quot;Line 82 Response {}&quot;, response);</span>
<span class="nc bnc" id="L83" title="All 2 branches missed.">        if(response == null) {</span>
<span class="nc" id="L84">            throw new RuntimeException(&quot;Not able to refresh token&quot;);</span>
        }

<span class="nc" id="L87">        return updateToken(response, auth);</span>
    }


    private Auth updateToken(AuthTokenResponse response, Auth auth) {
<span class="nc" id="L92">        Instant now = Instant.now();</span>
<span class="nc" id="L93">        auth.setAccessToken(response.getAccessToken());</span>
<span class="nc" id="L94">        auth.setExpiresIn(response.getExpiresIn());</span>
<span class="nc" id="L95">        auth.setTokenExpiredAt(now.plusSeconds(response.getExpiresIn()));</span>

<span class="nc" id="L97">        logger.info(&quot;Before save:: {}&quot;, auth );</span>
<span class="nc" id="L98">        authRepository.save(auth);</span>
<span class="nc" id="L99">        logger.info(&quot;After save :: {}&quot;, auth );</span>
<span class="nc" id="L100">        return auth;</span>
    }


    private Auth storeToken(AuthTokenResponse response) {
<span class="nc" id="L105">        logger.info(&quot;Rseponse: {}&quot;, response);</span>
<span class="nc" id="L106">        Instant now = Instant.now();</span>
<span class="nc" id="L107">        Auth auth = new Auth();</span>
<span class="nc" id="L108">        auth.setAccessToken(response.getAccessToken());</span>
<span class="nc" id="L109">        auth.setClientId(clientId);</span>
<span class="nc" id="L110">        auth.setExpiresIn(response.getExpiresIn());</span>
<span class="nc" id="L111">        auth.setScope(response.getScope());</span>
<span class="nc" id="L112">        auth.setTeamId(response.getTeamId());</span>
<span class="nc" id="L113">        auth.setRefreshToken(response.getRefreshToken());</span>
<span class="nc" id="L114">        auth.setTokenType(response.getTokenType());</span>
<span class="nc" id="L115">        auth.setCreatedAt(now);</span>
<span class="nc" id="L116">        auth.setTokenExpiredAt(now.plusSeconds(response.getExpiresIn()));</span>

<span class="nc" id="L118">        authRepository.save(auth);</span>
<span class="nc" id="L119">        logger.info(&quot;Token created!&quot;);</span>
<span class="nc" id="L120">        return auth;</span>
    }
}

</pre><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.5.201910111838</span></div></body></html>