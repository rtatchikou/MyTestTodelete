package com.lyncwork.services.dropbox.service.mapper;

import com.lyncwork.services.dropbox.domain.Company;
import com.lyncwork.services.dropbox.domain.File;
import com.lyncwork.services.dropbox.domain.User;
import com.lyncwork.services.dropbox.service.dto.CompanyDTO;
import com.lyncwork.services.dropbox.service.dto.FileDTO;
import com.lyncwork.services.dropbox.service.dto.UserDTO;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2021-01-26T17:07:10-0500",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 11.0.9 (Oracle Corporation)"
)
@Component
public class FileMapperImpl implements FileMapper {

    @Override
    public List<File> toEntity(List<FileDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        List<File> list = new ArrayList<File>( dtoList.size() );
        for ( FileDTO fileDTO : dtoList ) {
            list.add( toEntity( fileDTO ) );
        }

        return list;
    }

    @Override
    public List<FileDTO> toDto(List<File> entityList) {
        if ( entityList == null ) {
            return null;
        }

        List<FileDTO> list = new ArrayList<FileDTO>( entityList.size() );
        for ( File file : entityList ) {
            list.add( toDto( file ) );
        }

        return list;
    }

    @Override
    public FileDTO toDto(File entity) {
        if ( entity == null ) {
            return null;
        }

        FileDTO fileDTO = new FileDTO();

        fileDTO.setId( entity.getId() );
        fileDTO.setFileName( entity.getFileName() );
        fileDTO.setFilePath( entity.getFilePath() );
        fileDTO.setFileOwner( userToUserDTO( entity.getFileOwner() ) );
        fileDTO.setSharers( userSetToUserDTOSet( entity.getSharers() ) );

        return fileDTO;
    }

    @Override
    public File toEntity(FileDTO dto) {
        if ( dto == null ) {
            return null;
        }

        File file = new File();

        file.setId( dto.getId() );
        file.setFileName( dto.getFileName() );
        file.setFilePath( dto.getFilePath() );
        file.setFileOwner( userDTOToUser( dto.getFileOwner() ) );
        file.setSharers( userDTOSetToUserSet( dto.getSharers() ) );

        return file;
    }

    protected CompanyDTO companyToCompanyDTO(Company company) {
        if ( company == null ) {
            return null;
        }

        CompanyDTO companyDTO = new CompanyDTO();

        companyDTO.setId( company.getId() );
        companyDTO.setTenantId( company.getTenantId() );
        companyDTO.setCompanyName( company.getCompanyName() );
        companyDTO.setTeamFolderName( company.getTeamFolderName() );
        companyDTO.setTeamFolderNameSpaceId( company.getTeamFolderNameSpaceId() );

        return companyDTO;
    }

    protected Set<FileDTO> fileSetToFileDTOSet(Set<File> set) {
        if ( set == null ) {
            return null;
        }

        Set<FileDTO> set1 = new HashSet<FileDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( File file : set ) {
            set1.add( toDto( file ) );
        }

        return set1;
    }

    protected UserDTO userToUserDTO(User user) {
        if ( user == null ) {
            return null;
        }

        UserDTO userDTO = new UserDTO();

        userDTO.setId( user.getId() );
        userDTO.setEmailPrimary( user.getEmailPrimary() );
        userDTO.setUsername( user.getUsername() );
        userDTO.setCompany( companyToCompanyDTO( user.getCompany() ) );
        userDTO.setUserRole( user.getUserRole() );
        userDTO.setFileSheredWithUser( fileSetToFileDTOSet( user.getFileSheredWithUser() ) );
        userDTO.setFilesOwnedByUser( fileSetToFileDTOSet( user.getFilesOwnedByUser() ) );

        return userDTO;
    }

    protected Set<UserDTO> userSetToUserDTOSet(Set<User> set) {
        if ( set == null ) {
            return null;
        }

        Set<UserDTO> set1 = new HashSet<UserDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( User user : set ) {
            set1.add( userToUserDTO( user ) );
        }

        return set1;
    }

    protected Company companyDTOToCompany(CompanyDTO companyDTO) {
        if ( companyDTO == null ) {
            return null;
        }

        Company company = new Company();

        company.setId( companyDTO.getId() );
        company.setTenantId( companyDTO.getTenantId() );
        company.setCompanyName( companyDTO.getCompanyName() );
        company.setTeamFolderName( companyDTO.getTeamFolderName() );
        company.setTeamFolderNameSpaceId( companyDTO.getTeamFolderNameSpaceId() );

        return company;
    }

    protected Set<File> fileDTOSetToFileSet(Set<FileDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<File> set1 = new HashSet<File>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( FileDTO fileDTO : set ) {
            set1.add( toEntity( fileDTO ) );
        }

        return set1;
    }

    protected User userDTOToUser(UserDTO userDTO) {
        if ( userDTO == null ) {
            return null;
        }

        User user = new User();

        user.setId( userDTO.getId() );
        user.setEmailPrimary( userDTO.getEmailPrimary() );
        user.setUsername( userDTO.getUsername() );
        user.setCompany( companyDTOToCompany( userDTO.getCompany() ) );
        user.setUserRole( userDTO.getUserRole() );
        user.setFileSheredWithUser( fileDTOSetToFileSet( userDTO.getFileSheredWithUser() ) );
        user.setFilesOwnedByUser( fileDTOSetToFileSet( userDTO.getFilesOwnedByUser() ) );

        return user;
    }

    protected Set<User> userDTOSetToUserSet(Set<UserDTO> set) {
        if ( set == null ) {
            return null;
        }

        Set<User> set1 = new HashSet<User>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
        for ( UserDTO userDTO : set ) {
            set1.add( userDTOToUser( userDTO ) );
        }

        return set1;
    }
}
