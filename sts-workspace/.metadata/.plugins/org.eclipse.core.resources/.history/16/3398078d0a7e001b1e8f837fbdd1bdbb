<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>JWTFilter.java</title><link rel="stylesheet" href="../jacoco-resources/prettify.css" type="text/css"/><script type="text/javascript" src="../jacoco-resources/prettify.js"></script></head><body onload="window['PR_TAB_WIDTH']=4;prettyPrint()"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Dropbox</a> &gt; <a href="index.source.html" class="el_package">com.lyncwork.services.dropbox.security</a> &gt; <span class="el_source">JWTFilter.java</span></div><h1>JWTFilter.java</h1><pre class="source lang-java linenums">package com.lyncwork.services.dropbox.security;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.GenericFilterBean;

import com.lyncwork.services.dropbox.repository.hibernate.TenantContext;
import com.lyncwork.services.dropbox.security.jwt.TokenProvider;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * Filters incoming requests and installs a Spring Security principal if a header corresponding to a valid user is
 * found.
 */
public class JWTFilter extends GenericFilterBean {

    public static final String AUTHORIZATION_HEADER = &quot;Authorization&quot;;
    public static final String AUTHORIZATION_COOKIE_NAME = &quot;lw-authentication&quot;;

    private TokenProvider tokenProvider;

<span class="nc" id="L34">    public JWTFilter(TokenProvider tokenProvider) {</span>
<span class="nc" id="L35">        this.tokenProvider = tokenProvider;</span>
<span class="nc" id="L36">    }</span>

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
        throws IOException, ServletException {
<span class="nc" id="L41">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span>
<span class="nc" id="L42">        String jwt = resolveToken(httpServletRequest);</span>
<span class="nc bnc" id="L43" title="All 4 branches missed.">        if (StringUtils.hasText(jwt) &amp;&amp; this.tokenProvider.validateToken(jwt)) {</span>
<span class="nc" id="L44">            Authentication authentication = this.tokenProvider.getAuthentication(jwt);</span>
<span class="nc" id="L45">            SecurityContextHolder.getContext().setAuthentication(authentication);</span>
<span class="nc" id="L46">            String tenant=this.tokenProvider.getTenantClaim(jwt);</span>
<span class="nc" id="L47">            TenantContext.setTenant(tenant);</span>

        }
<span class="nc" id="L50">        filterChain.doFilter(servletRequest, servletResponse);</span>
<span class="nc" id="L51">    }</span>

    private String resolveToken(HttpServletRequest request) {
<span class="nc" id="L54">        String bearerToken = request.getHeader(AUTHORIZATION_HEADER);</span>
<span class="nc bnc" id="L55" title="All 4 branches missed.">        if (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(&quot;Bearer &quot;)) {</span>
<span class="nc" id="L56">            return bearerToken.substring(7);</span>
        }
<span class="nc bnc" id="L58" title="All 2 branches missed.">        List&lt;Cookie&gt; cookies = request.getCookies() != null ? Arrays.asList(request.getCookies()) : Collections.emptyList();</span>
<span class="nc bnc" id="L59" title="All 2 branches missed.">        if (!CollectionUtils.isEmpty(cookies)) {</span>

<span class="nc" id="L61">            return cookies.stream()</span>
<span class="nc" id="L62">                          .filter(c -&gt; AUTHORIZATION_COOKIE_NAME.equals(c.getName()))</span>
<span class="nc" id="L63">                          .map(Cookie::getValue)</span>
<span class="nc" id="L64">                          .findFirst().orElse(null);</span>
        }
<span class="nc" id="L66">        return null;</span>
    }


}
</pre><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.5.201910111838</span></div></body></html>